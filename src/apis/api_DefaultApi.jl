# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DefaultApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DefaultApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DefaultApi }) = "https://api.themoviedb.org"

const _returntypes_account_add_favorite_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieAddRating200Response,
)

function _oacinternal_account_add_favorite(_api::DefaultApi, account_id::Int64; session_id=nothing, movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_account_add_favorite_DefaultApi, "/3/account/{account_id}/favorite", ["sec0", ], movie_add_rating_request)
    OpenAPI.Clients.set_param(_ctx.path, "account_id", account_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Add Favorite



Params:
- account_id::Int64 (required)
- session_id::String
- movie_add_rating_request::MovieAddRatingRequest

Return: MovieAddRating200Response, OpenAPI.Clients.ApiResponse
"""
function account_add_favorite(_api::DefaultApi, account_id::Int64; session_id=nothing, movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_add_favorite(_api, account_id; session_id=session_id, movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function account_add_favorite(_api::DefaultApi, response_stream::Channel, account_id::Int64; session_id=nothing, movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_add_favorite(_api, account_id; session_id=session_id, movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_account_add_to_watchlist_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieAddRating200Response,
)

function _oacinternal_account_add_to_watchlist(_api::DefaultApi, account_id::Int64; session_id=nothing, movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_account_add_to_watchlist_DefaultApi, "/3/account/{account_id}/watchlist", ["sec0", ], movie_add_rating_request)
    OpenAPI.Clients.set_param(_ctx.path, "account_id", account_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Add To Watchlist



Params:
- account_id::Int64 (required)
- session_id::String
- movie_add_rating_request::MovieAddRatingRequest

Return: MovieAddRating200Response, OpenAPI.Clients.ApiResponse
"""
function account_add_to_watchlist(_api::DefaultApi, account_id::Int64; session_id=nothing, movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_add_to_watchlist(_api, account_id; session_id=session_id, movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function account_add_to_watchlist(_api::DefaultApi, response_stream::Channel, account_id::Int64; session_id=nothing, movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_add_to_watchlist(_api, account_id; session_id=session_id, movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_account_details_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AccountDetails200Response,
)

function _oacinternal_account_details(_api::DefaultApi, account_id::Int64; session_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_account_details_DefaultApi, "/3/account/{account_id}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "account_id", account_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Details



Params:
- account_id::Int64 (required)
- session_id::String

Return: AccountDetails200Response, OpenAPI.Clients.ApiResponse
"""
function account_details(_api::DefaultApi, account_id::Int64; session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_details(_api, account_id; session_id=session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function account_details(_api::DefaultApi, response_stream::Channel, account_id::Int64; session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_details(_api, account_id; session_id=session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_account_favorite_tv_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AccountFavoriteTv200Response,
)

function _oacinternal_account_favorite_tv(_api::DefaultApi, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_account_favorite_tv_DefaultApi, "/3/account/{account_id}/favorite/tv", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "account_id", account_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort_by", sort_by)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Favorite TV



Params:
- account_id::Int64 (required)
- language::String
- page::Int64
- session_id::String
- sort_by::String

Return: AccountFavoriteTv200Response, OpenAPI.Clients.ApiResponse
"""
function account_favorite_tv(_api::DefaultApi, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_favorite_tv(_api, account_id; language=language, page=page, session_id=session_id, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function account_favorite_tv(_api::DefaultApi, response_stream::Channel, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_favorite_tv(_api, account_id; language=language, page=page, session_id=session_id, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_account_get_favorites_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AccountGetFavorites200Response,
)

function _oacinternal_account_get_favorites(_api::DefaultApi, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_account_get_favorites_DefaultApi, "/3/account/{account_id}/favorite/movies", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "account_id", account_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort_by", sort_by)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Favorite Movies



Params:
- account_id::Int64 (required)
- language::String
- page::Int64
- session_id::String
- sort_by::String

Return: AccountGetFavorites200Response, OpenAPI.Clients.ApiResponse
"""
function account_get_favorites(_api::DefaultApi, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_get_favorites(_api, account_id; language=language, page=page, session_id=session_id, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function account_get_favorites(_api::DefaultApi, response_stream::Channel, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_get_favorites(_api, account_id; language=language, page=page, session_id=session_id, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_account_lists_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AccountLists200Response,
)

function _oacinternal_account_lists(_api::DefaultApi, account_id::Int64; page=nothing, session_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_account_lists_DefaultApi, "/3/account/{account_id}/lists", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "account_id", account_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists



Params:
- account_id::Int64 (required)
- page::Int64
- session_id::String

Return: AccountLists200Response, OpenAPI.Clients.ApiResponse
"""
function account_lists(_api::DefaultApi, account_id::Int64; page=nothing, session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_lists(_api, account_id; page=page, session_id=session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function account_lists(_api::DefaultApi, response_stream::Channel, account_id::Int64; page=nothing, session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_lists(_api, account_id; page=page, session_id=session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_account_rated_movies_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AccountRatedMovies200Response,
)

function _oacinternal_account_rated_movies(_api::DefaultApi, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_account_rated_movies_DefaultApi, "/3/account/{account_id}/rated/movies", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "account_id", account_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort_by", sort_by)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Rated Movies



Params:
- account_id::Int64 (required)
- language::String
- page::Int64
- session_id::String
- sort_by::String

Return: AccountRatedMovies200Response, OpenAPI.Clients.ApiResponse
"""
function account_rated_movies(_api::DefaultApi, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_rated_movies(_api, account_id; language=language, page=page, session_id=session_id, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function account_rated_movies(_api::DefaultApi, response_stream::Channel, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_rated_movies(_api, account_id; language=language, page=page, session_id=session_id, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_account_rated_tv_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AccountRatedTv200Response,
)

function _oacinternal_account_rated_tv(_api::DefaultApi, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_account_rated_tv_DefaultApi, "/3/account/{account_id}/rated/tv", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "account_id", account_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort_by", sort_by)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Rated TV



Params:
- account_id::Int64 (required)
- language::String
- page::Int64
- session_id::String
- sort_by::String

Return: AccountRatedTv200Response, OpenAPI.Clients.ApiResponse
"""
function account_rated_tv(_api::DefaultApi, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_rated_tv(_api, account_id; language=language, page=page, session_id=session_id, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function account_rated_tv(_api::DefaultApi, response_stream::Channel, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_rated_tv(_api, account_id; language=language, page=page, session_id=session_id, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_account_rated_tv_episodes_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AccountRatedTvEpisodes200Response,
)

function _oacinternal_account_rated_tv_episodes(_api::DefaultApi, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_account_rated_tv_episodes_DefaultApi, "/3/account/{account_id}/rated/tv/episodes", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "account_id", account_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort_by", sort_by)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Rated TV Episodes



Params:
- account_id::Int64 (required)
- language::String
- page::Int64
- session_id::String
- sort_by::String

Return: AccountRatedTvEpisodes200Response, OpenAPI.Clients.ApiResponse
"""
function account_rated_tv_episodes(_api::DefaultApi, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_rated_tv_episodes(_api, account_id; language=language, page=page, session_id=session_id, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function account_rated_tv_episodes(_api::DefaultApi, response_stream::Channel, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_rated_tv_episodes(_api, account_id; language=language, page=page, session_id=session_id, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_account_watchlist_movies_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AccountWatchlistMovies200Response,
)

function _oacinternal_account_watchlist_movies(_api::DefaultApi, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_account_watchlist_movies_DefaultApi, "/3/account/{account_id}/watchlist/movies", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "account_id", account_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort_by", sort_by)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Watchlist Movies



Params:
- account_id::Int64 (required)
- language::String
- page::Int64
- session_id::String
- sort_by::String

Return: AccountWatchlistMovies200Response, OpenAPI.Clients.ApiResponse
"""
function account_watchlist_movies(_api::DefaultApi, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_watchlist_movies(_api, account_id; language=language, page=page, session_id=session_id, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function account_watchlist_movies(_api::DefaultApi, response_stream::Channel, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_watchlist_movies(_api, account_id; language=language, page=page, session_id=session_id, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_account_watchlist_tv_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AccountWatchlistTv200Response,
)

function _oacinternal_account_watchlist_tv(_api::DefaultApi, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_account_watchlist_tv_DefaultApi, "/3/account/{account_id}/watchlist/tv", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "account_id", account_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sort_by", sort_by)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Watchlist TV



Params:
- account_id::Int64 (required)
- language::String
- page::Int64
- session_id::String
- sort_by::String

Return: AccountWatchlistTv200Response, OpenAPI.Clients.ApiResponse
"""
function account_watchlist_tv(_api::DefaultApi, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_watchlist_tv(_api, account_id; language=language, page=page, session_id=session_id, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function account_watchlist_tv(_api::DefaultApi, response_stream::Channel, account_id::Int64; language=nothing, page=nothing, session_id=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_account_watchlist_tv(_api, account_id; language=language, page=page, session_id=session_id, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_alternative_names_copy_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AlternativeNamesCopy200Response,
)

function _oacinternal_alternative_names_copy(_api::DefaultApi, network_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_alternative_names_copy_DefaultApi, "/3/network/{network_id}/images", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "network_id", network_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Images

Get the TV network logos by id.

Params:
- network_id::Int64 (required)

Return: AlternativeNamesCopy200Response, OpenAPI.Clients.ApiResponse
"""
function alternative_names_copy(_api::DefaultApi, network_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_alternative_names_copy(_api, network_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function alternative_names_copy(_api::DefaultApi, response_stream::Channel, network_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_alternative_names_copy(_api, network_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_authentication_create_guest_session_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AuthenticationCreateGuestSession200Response,
)

function _oacinternal_authentication_create_guest_session(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_authentication_create_guest_session_DefaultApi, "/3/authentication/guest_session/new", ["sec0", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Create Guest Session



Params:

Return: AuthenticationCreateGuestSession200Response, OpenAPI.Clients.ApiResponse
"""
function authentication_create_guest_session(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_authentication_create_guest_session(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function authentication_create_guest_session(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_authentication_create_guest_session(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_authentication_create_request_token_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AuthenticationCreateRequestToken200Response,
)

function _oacinternal_authentication_create_request_token(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_authentication_create_request_token_DefaultApi, "/3/authentication/token/new", ["sec0", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Create Request Token



Params:

Return: AuthenticationCreateRequestToken200Response, OpenAPI.Clients.ApiResponse
"""
function authentication_create_request_token(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_authentication_create_request_token(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function authentication_create_request_token(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_authentication_create_request_token(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_authentication_create_session_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AuthenticationCreateSession200Response,
)

function _oacinternal_authentication_create_session(_api::DefaultApi; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_authentication_create_session_DefaultApi, "/3/authentication/session/new", ["sec0", ], movie_add_rating_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Session



Params:
- movie_add_rating_request::MovieAddRatingRequest

Return: AuthenticationCreateSession200Response, OpenAPI.Clients.ApiResponse
"""
function authentication_create_session(_api::DefaultApi; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_authentication_create_session(_api; movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function authentication_create_session(_api::DefaultApi, response_stream::Channel; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_authentication_create_session(_api; movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_authentication_create_session_from_login_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AuthenticationCreateSessionFromLogin200Response,
)

function _oacinternal_authentication_create_session_from_login(_api::DefaultApi; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_authentication_create_session_from_login_DefaultApi, "/3/authentication/token/validate_with_login", ["sec0", ], movie_add_rating_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Session (with login)

This method allows an application to validate a request token by entering a username and password.

Params:
- movie_add_rating_request::MovieAddRatingRequest

Return: AuthenticationCreateSessionFromLogin200Response, OpenAPI.Clients.ApiResponse
"""
function authentication_create_session_from_login(_api::DefaultApi; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_authentication_create_session_from_login(_api; movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function authentication_create_session_from_login(_api::DefaultApi, response_stream::Channel; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_authentication_create_session_from_login(_api; movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_authentication_create_session_from_v4_token_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AuthenticationCreateSessionFromV4Token200Response,
)

function _oacinternal_authentication_create_session_from_v4_token(_api::DefaultApi; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_authentication_create_session_from_v4_token_DefaultApi, "/3/authentication/session/convert/4", ["sec0", ], movie_add_rating_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create Session (from v4 token)



Params:
- movie_add_rating_request::MovieAddRatingRequest

Return: AuthenticationCreateSessionFromV4Token200Response, OpenAPI.Clients.ApiResponse
"""
function authentication_create_session_from_v4_token(_api::DefaultApi; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_authentication_create_session_from_v4_token(_api; movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function authentication_create_session_from_v4_token(_api::DefaultApi, response_stream::Channel; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_authentication_create_session_from_v4_token(_api; movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_authentication_delete_session_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AuthenticationDeleteSession200Response,
)

function _oacinternal_authentication_delete_session(_api::DefaultApi; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_authentication_delete_session_DefaultApi, "/3/authentication/session", ["sec0", ], movie_add_rating_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Session



Params:
- movie_add_rating_request::MovieAddRatingRequest

Return: AuthenticationDeleteSession200Response, OpenAPI.Clients.ApiResponse
"""
function authentication_delete_session(_api::DefaultApi; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_authentication_delete_session(_api; movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function authentication_delete_session(_api::DefaultApi, response_stream::Channel; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_authentication_delete_session(_api; movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_authentication_validate_key_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AuthenticationValidateKey200Response,
    Regex("^" * replace("401", "x"=>".") * "\$") => AuthenticationValidateKey401Response,
)

function _oacinternal_authentication_validate_key(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_authentication_validate_key_DefaultApi, "/3/authentication", ["sec0", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Validate Key

Test your API Key to see if it's valid.

Params:

Return: AuthenticationValidateKey200Response, OpenAPI.Clients.ApiResponse
"""
function authentication_validate_key(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_authentication_validate_key(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function authentication_validate_key(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_authentication_validate_key(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_certification_movie_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CertificationMovieList200Response,
)

function _oacinternal_certification_movie_list(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_certification_movie_list_DefaultApi, "/3/certification/movie/list", ["sec0", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Movie Certifications

Get an up to date list of the officially supported movie certifications on TMDB.

Params:

Return: CertificationMovieList200Response, OpenAPI.Clients.ApiResponse
"""
function certification_movie_list(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_certification_movie_list(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function certification_movie_list(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_certification_movie_list(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_certifications_tv_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CertificationsTvList200Response,
)

function _oacinternal_certifications_tv_list(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_certifications_tv_list_DefaultApi, "/3/certification/tv/list", ["sec0", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""TV Certifications



Params:

Return: CertificationsTvList200Response, OpenAPI.Clients.ApiResponse
"""
function certifications_tv_list(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_certifications_tv_list(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function certifications_tv_list(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_certifications_tv_list(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_changes_movie_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ChangesMovieList200Response,
)

function _oacinternal_changes_movie_list(_api::DefaultApi; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_changes_movie_list_DefaultApi, "/3/movie/changes", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "end_date", end_date)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "start_date", start_date)  # type Date
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Movie List

Get a list of all of the movie ids that have been changed in the past 24 hours.

Params:
- end_date::Date
- page::Int64
- start_date::Date

Return: ChangesMovieList200Response, OpenAPI.Clients.ApiResponse
"""
function changes_movie_list(_api::DefaultApi; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_changes_movie_list(_api; end_date=end_date, page=page, start_date=start_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function changes_movie_list(_api::DefaultApi, response_stream::Channel; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_changes_movie_list(_api; end_date=end_date, page=page, start_date=start_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_changes_people_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ChangesPeopleList200Response,
)

function _oacinternal_changes_people_list(_api::DefaultApi; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_changes_people_list_DefaultApi, "/3/person/changes", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "end_date", end_date)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "start_date", start_date)  # type Date
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""People List



Params:
- end_date::Date
- page::Int64
- start_date::Date

Return: ChangesPeopleList200Response, OpenAPI.Clients.ApiResponse
"""
function changes_people_list(_api::DefaultApi; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_changes_people_list(_api; end_date=end_date, page=page, start_date=start_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function changes_people_list(_api::DefaultApi, response_stream::Channel; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_changes_people_list(_api; end_date=end_date, page=page, start_date=start_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_changes_tv_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ChangesTvList200Response,
)

function _oacinternal_changes_tv_list(_api::DefaultApi; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_changes_tv_list_DefaultApi, "/3/tv/changes", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "end_date", end_date)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "start_date", start_date)  # type Date
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""TV List



Params:
- end_date::Date
- page::Int64
- start_date::Date

Return: ChangesTvList200Response, OpenAPI.Clients.ApiResponse
"""
function changes_tv_list(_api::DefaultApi; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_changes_tv_list(_api; end_date=end_date, page=page, start_date=start_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function changes_tv_list(_api::DefaultApi, response_stream::Channel; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_changes_tv_list(_api; end_date=end_date, page=page, start_date=start_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_collection_details_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CollectionDetails200Response,
)

function _oacinternal_collection_details(_api::DefaultApi, collection_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_collection_details_DefaultApi, "/3/collection/{collection_id}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_id", collection_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Details

Get collection details by ID.

Params:
- collection_id::Int64 (required)
- language::String

Return: CollectionDetails200Response, OpenAPI.Clients.ApiResponse
"""
function collection_details(_api::DefaultApi, collection_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_collection_details(_api, collection_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function collection_details(_api::DefaultApi, response_stream::Channel, collection_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_collection_details(_api, collection_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_collection_images_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CollectionImages200Response,
)

function _oacinternal_collection_images(_api::DefaultApi, collection_id::Int64; include_image_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_collection_images_DefaultApi, "/3/collection/{collection_id}/images", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_id", collection_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "include_image_language", include_image_language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Images

Get the images that belong to a collection.

Params:
- collection_id::Int64 (required)
- include_image_language::String
- language::String

Return: CollectionImages200Response, OpenAPI.Clients.ApiResponse
"""
function collection_images(_api::DefaultApi, collection_id::Int64; include_image_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_collection_images(_api, collection_id; include_image_language=include_image_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function collection_images(_api::DefaultApi, response_stream::Channel, collection_id::Int64; include_image_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_collection_images(_api, collection_id; include_image_language=include_image_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_collection_translations_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CollectionTranslations200Response,
)

function _oacinternal_collection_translations(_api::DefaultApi, collection_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_collection_translations_DefaultApi, "/3/collection/{collection_id}/translations", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "collection_id", collection_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Translations



Params:
- collection_id::Int64 (required)

Return: CollectionTranslations200Response, OpenAPI.Clients.ApiResponse
"""
function collection_translations(_api::DefaultApi, collection_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_collection_translations(_api, collection_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function collection_translations(_api::DefaultApi, response_stream::Channel, collection_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_collection_translations(_api, collection_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_company_alternative_names_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CompanyAlternativeNames200Response,
)

function _oacinternal_company_alternative_names(_api::DefaultApi, company_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_company_alternative_names_DefaultApi, "/3/company/{company_id}/alternative_names", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "company_id", company_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Alternative Names

Get the company details by ID.

Params:
- company_id::Int64 (required)

Return: CompanyAlternativeNames200Response, OpenAPI.Clients.ApiResponse
"""
function company_alternative_names(_api::DefaultApi, company_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_company_alternative_names(_api, company_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function company_alternative_names(_api::DefaultApi, response_stream::Channel, company_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_company_alternative_names(_api, company_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_company_details_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CompanyDetails200Response,
)

function _oacinternal_company_details(_api::DefaultApi, company_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_company_details_DefaultApi, "/3/company/{company_id}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "company_id", company_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Details

Get the company details by ID.

Params:
- company_id::Int64 (required)

Return: CompanyDetails200Response, OpenAPI.Clients.ApiResponse
"""
function company_details(_api::DefaultApi, company_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_company_details(_api, company_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function company_details(_api::DefaultApi, response_stream::Channel, company_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_company_details(_api, company_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_company_images_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CompanyImages200Response,
)

function _oacinternal_company_images(_api::DefaultApi, company_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_company_images_DefaultApi, "/3/company/{company_id}/images", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "company_id", company_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Images

Get the company logos by id.

Params:
- company_id::Int64 (required)

Return: CompanyImages200Response, OpenAPI.Clients.ApiResponse
"""
function company_images(_api::DefaultApi, company_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_company_images(_api, company_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function company_images(_api::DefaultApi, response_stream::Channel, company_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_company_images(_api, company_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_configuration_countries_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{WatchProvidersAvailableRegions200ResponseResultsInner},
)

function _oacinternal_configuration_countries(_api::DefaultApi; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_configuration_countries_DefaultApi, "/3/configuration/countries", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Countries

Get the list of countries (ISO 3166-1 tags) used throughout TMDB.

Params:
- language::String

Return: Vector{WatchProvidersAvailableRegions200ResponseResultsInner}, OpenAPI.Clients.ApiResponse
"""
function configuration_countries(_api::DefaultApi; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_configuration_countries(_api; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function configuration_countries(_api::DefaultApi, response_stream::Channel; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_configuration_countries(_api; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_configuration_details_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ConfigurationDetails200Response,
)

function _oacinternal_configuration_details(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_configuration_details_DefaultApi, "/3/configuration", ["sec0", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Details

Query the API configuration details.

Params:

Return: ConfigurationDetails200Response, OpenAPI.Clients.ApiResponse
"""
function configuration_details(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_configuration_details(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function configuration_details(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_configuration_details(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_configuration_jobs_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ConfigurationJobs200ResponseInner},
)

function _oacinternal_configuration_jobs(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_configuration_jobs_DefaultApi, "/3/configuration/jobs", ["sec0", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Jobs

Get the list of the jobs and departments we use on TMDB.

Params:

Return: Vector{ConfigurationJobs200ResponseInner}, OpenAPI.Clients.ApiResponse
"""
function configuration_jobs(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_configuration_jobs(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function configuration_jobs(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_configuration_jobs(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_configuration_languages_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ConfigurationLanguages200ResponseInner},
)

function _oacinternal_configuration_languages(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_configuration_languages_DefaultApi, "/3/configuration/languages", ["sec0", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Languages

Get the list of languages (ISO 639-1 tags) used throughout TMDB.

Params:

Return: Vector{ConfigurationLanguages200ResponseInner}, OpenAPI.Clients.ApiResponse
"""
function configuration_languages(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_configuration_languages(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function configuration_languages(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_configuration_languages(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_configuration_primary_translations_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{String},
)

function _oacinternal_configuration_primary_translations(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_configuration_primary_translations_DefaultApi, "/3/configuration/primary_translations", ["sec0", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Primary Translations

Get a list of the officially supported translations on TMDB.

Params:

Return: Vector{String}, OpenAPI.Clients.ApiResponse
"""
function configuration_primary_translations(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_configuration_primary_translations(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function configuration_primary_translations(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_configuration_primary_translations(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_configuration_timezones_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{ConfigurationTimezones200ResponseInner},
)

function _oacinternal_configuration_timezones(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_configuration_timezones_DefaultApi, "/3/configuration/timezones", ["sec0", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Timezones

Get the list of timezones used throughout TMDB.

Params:

Return: Vector{ConfigurationTimezones200ResponseInner}, OpenAPI.Clients.ApiResponse
"""
function configuration_timezones(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_configuration_timezones(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function configuration_timezones(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_configuration_timezones(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_credit_details_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CreditDetails200Response,
)

function _oacinternal_credit_details(_api::DefaultApi, credit_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_credit_details_DefaultApi, "/3/credit/{credit_id}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "credit_id", credit_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Details

Get a movie or TV credit details by ID.

Params:
- credit_id::String (required)

Return: CreditDetails200Response, OpenAPI.Clients.ApiResponse
"""
function credit_details(_api::DefaultApi, credit_id::String; _mediaType=nothing)
    _ctx = _oacinternal_credit_details(_api, credit_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function credit_details(_api::DefaultApi, response_stream::Channel, credit_id::String; _mediaType=nothing)
    _ctx = _oacinternal_credit_details(_api, credit_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_details_copy_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DetailsCopy200Response,
)

function _oacinternal_details_copy(_api::DefaultApi, network_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_details_copy_DefaultApi, "/3/network/{network_id}/alternative_names", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "network_id", network_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Alternative Names

Get the alternative names of a network.

Params:
- network_id::Int64 (required)

Return: DetailsCopy200Response, OpenAPI.Clients.ApiResponse
"""
function details_copy(_api::DefaultApi, network_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_details_copy(_api, network_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function details_copy(_api::DefaultApi, response_stream::Channel, network_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_details_copy(_api, network_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_discover_movie_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DiscoverMovie200Response,
)

function _oacinternal_discover_movie(_api::DefaultApi; certification=nothing, certification_gte=nothing, certification_lte=nothing, certification_country=nothing, include_adult=nothing, include_video=nothing, language=nothing, page=nothing, primary_release_year=nothing, primary_release_date_gte=nothing, primary_release_date_lte=nothing, region=nothing, release_date_gte=nothing, release_date_lte=nothing, sort_by=nothing, vote_average_gte=nothing, vote_average_lte=nothing, vote_count_gte=nothing, vote_count_lte=nothing, watch_region=nothing, with_cast=nothing, with_companies=nothing, with_crew=nothing, with_genres=nothing, with_keywords=nothing, with_origin_country=nothing, with_original_language=nothing, with_people=nothing, with_release_type=nothing, with_runtime_gte=nothing, with_runtime_lte=nothing, with_watch_monetization_types=nothing, with_watch_providers=nothing, without_companies=nothing, without_genres=nothing, without_keywords=nothing, without_watch_providers=nothing, year=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_discover_movie_DefaultApi, "/3/discover/movie", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "certification", certification)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "certification.gte", certification_gte)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "certification.lte", certification_lte)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "certification_country", certification_country)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "include_adult", include_adult)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "include_video", include_video)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "primary_release_year", primary_release_year)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "primary_release_date.gte", primary_release_date_gte)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "primary_release_date.lte", primary_release_date_lte)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "region", region)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "release_date.gte", release_date_gte)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "release_date.lte", release_date_lte)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "sort_by", sort_by)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "vote_average.gte", vote_average_gte)  # type Float32
    OpenAPI.Clients.set_param(_ctx.query, "vote_average.lte", vote_average_lte)  # type Float32
    OpenAPI.Clients.set_param(_ctx.query, "vote_count.gte", vote_count_gte)  # type Float32
    OpenAPI.Clients.set_param(_ctx.query, "vote_count.lte", vote_count_lte)  # type Float32
    OpenAPI.Clients.set_param(_ctx.query, "watch_region", watch_region)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_cast", with_cast)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_companies", with_companies)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_crew", with_crew)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_genres", with_genres)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_keywords", with_keywords)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_origin_country", with_origin_country)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_original_language", with_original_language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_people", with_people)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_release_type", with_release_type)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "with_runtime.gte", with_runtime_gte)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "with_runtime.lte", with_runtime_lte)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "with_watch_monetization_types", with_watch_monetization_types)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_watch_providers", with_watch_providers)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "without_companies", without_companies)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "without_genres", without_genres)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "without_keywords", without_keywords)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "without_watch_providers", without_watch_providers)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "year", year)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Movie

Find movies using over 30 filters and sort options.

Params:
- certification::String
- certification_gte::String
- certification_lte::String
- certification_country::String
- include_adult::Bool
- include_video::Bool
- language::String
- page::Int64
- primary_release_year::Int64
- primary_release_date_gte::Date
- primary_release_date_lte::Date
- region::String
- release_date_gte::Date
- release_date_lte::Date
- sort_by::String
- vote_average_gte::Float32
- vote_average_lte::Float32
- vote_count_gte::Float32
- vote_count_lte::Float32
- watch_region::String
- with_cast::String
- with_companies::String
- with_crew::String
- with_genres::String
- with_keywords::String
- with_origin_country::String
- with_original_language::String
- with_people::String
- with_release_type::Int64
- with_runtime_gte::Int64
- with_runtime_lte::Int64
- with_watch_monetization_types::String
- with_watch_providers::String
- without_companies::String
- without_genres::String
- without_keywords::String
- without_watch_providers::String
- year::Int64

Return: DiscoverMovie200Response, OpenAPI.Clients.ApiResponse
"""
function discover_movie(_api::DefaultApi; certification=nothing, certification_gte=nothing, certification_lte=nothing, certification_country=nothing, include_adult=nothing, include_video=nothing, language=nothing, page=nothing, primary_release_year=nothing, primary_release_date_gte=nothing, primary_release_date_lte=nothing, region=nothing, release_date_gte=nothing, release_date_lte=nothing, sort_by=nothing, vote_average_gte=nothing, vote_average_lte=nothing, vote_count_gte=nothing, vote_count_lte=nothing, watch_region=nothing, with_cast=nothing, with_companies=nothing, with_crew=nothing, with_genres=nothing, with_keywords=nothing, with_origin_country=nothing, with_original_language=nothing, with_people=nothing, with_release_type=nothing, with_runtime_gte=nothing, with_runtime_lte=nothing, with_watch_monetization_types=nothing, with_watch_providers=nothing, without_companies=nothing, without_genres=nothing, without_keywords=nothing, without_watch_providers=nothing, year=nothing, _mediaType=nothing)
    _ctx = _oacinternal_discover_movie(_api; certification=certification, certification_gte=certification_gte, certification_lte=certification_lte, certification_country=certification_country, include_adult=include_adult, include_video=include_video, language=language, page=page, primary_release_year=primary_release_year, primary_release_date_gte=primary_release_date_gte, primary_release_date_lte=primary_release_date_lte, region=region, release_date_gte=release_date_gte, release_date_lte=release_date_lte, sort_by=sort_by, vote_average_gte=vote_average_gte, vote_average_lte=vote_average_lte, vote_count_gte=vote_count_gte, vote_count_lte=vote_count_lte, watch_region=watch_region, with_cast=with_cast, with_companies=with_companies, with_crew=with_crew, with_genres=with_genres, with_keywords=with_keywords, with_origin_country=with_origin_country, with_original_language=with_original_language, with_people=with_people, with_release_type=with_release_type, with_runtime_gte=with_runtime_gte, with_runtime_lte=with_runtime_lte, with_watch_monetization_types=with_watch_monetization_types, with_watch_providers=with_watch_providers, without_companies=without_companies, without_genres=without_genres, without_keywords=without_keywords, without_watch_providers=without_watch_providers, year=year, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function discover_movie(_api::DefaultApi, response_stream::Channel; certification=nothing, certification_gte=nothing, certification_lte=nothing, certification_country=nothing, include_adult=nothing, include_video=nothing, language=nothing, page=nothing, primary_release_year=nothing, primary_release_date_gte=nothing, primary_release_date_lte=nothing, region=nothing, release_date_gte=nothing, release_date_lte=nothing, sort_by=nothing, vote_average_gte=nothing, vote_average_lte=nothing, vote_count_gte=nothing, vote_count_lte=nothing, watch_region=nothing, with_cast=nothing, with_companies=nothing, with_crew=nothing, with_genres=nothing, with_keywords=nothing, with_origin_country=nothing, with_original_language=nothing, with_people=nothing, with_release_type=nothing, with_runtime_gte=nothing, with_runtime_lte=nothing, with_watch_monetization_types=nothing, with_watch_providers=nothing, without_companies=nothing, without_genres=nothing, without_keywords=nothing, without_watch_providers=nothing, year=nothing, _mediaType=nothing)
    _ctx = _oacinternal_discover_movie(_api; certification=certification, certification_gte=certification_gte, certification_lte=certification_lte, certification_country=certification_country, include_adult=include_adult, include_video=include_video, language=language, page=page, primary_release_year=primary_release_year, primary_release_date_gte=primary_release_date_gte, primary_release_date_lte=primary_release_date_lte, region=region, release_date_gte=release_date_gte, release_date_lte=release_date_lte, sort_by=sort_by, vote_average_gte=vote_average_gte, vote_average_lte=vote_average_lte, vote_count_gte=vote_count_gte, vote_count_lte=vote_count_lte, watch_region=watch_region, with_cast=with_cast, with_companies=with_companies, with_crew=with_crew, with_genres=with_genres, with_keywords=with_keywords, with_origin_country=with_origin_country, with_original_language=with_original_language, with_people=with_people, with_release_type=with_release_type, with_runtime_gte=with_runtime_gte, with_runtime_lte=with_runtime_lte, with_watch_monetization_types=with_watch_monetization_types, with_watch_providers=with_watch_providers, without_companies=without_companies, without_genres=without_genres, without_keywords=without_keywords, without_watch_providers=without_watch_providers, year=year, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_discover_tv_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DiscoverTv200Response,
)

function _oacinternal_discover_tv(_api::DefaultApi; air_date_gte=nothing, air_date_lte=nothing, first_air_date_year=nothing, first_air_date_gte=nothing, first_air_date_lte=nothing, include_adult=nothing, include_null_first_air_dates=nothing, language=nothing, page=nothing, screened_theatrically=nothing, sort_by=nothing, timezone=nothing, vote_average_gte=nothing, vote_average_lte=nothing, vote_count_gte=nothing, vote_count_lte=nothing, watch_region=nothing, with_companies=nothing, with_genres=nothing, with_keywords=nothing, with_networks=nothing, with_origin_country=nothing, with_original_language=nothing, with_runtime_gte=nothing, with_runtime_lte=nothing, with_status=nothing, with_watch_monetization_types=nothing, with_watch_providers=nothing, without_companies=nothing, without_genres=nothing, without_keywords=nothing, without_watch_providers=nothing, with_type=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_discover_tv_DefaultApi, "/3/discover/tv", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "air_date.gte", air_date_gte)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "air_date.lte", air_date_lte)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "first_air_date_year", first_air_date_year)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "first_air_date.gte", first_air_date_gte)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "first_air_date.lte", first_air_date_lte)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "include_adult", include_adult)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "include_null_first_air_dates", include_null_first_air_dates)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "screened_theatrically", screened_theatrically)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "sort_by", sort_by)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "timezone", timezone)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "vote_average.gte", vote_average_gte)  # type Float32
    OpenAPI.Clients.set_param(_ctx.query, "vote_average.lte", vote_average_lte)  # type Float32
    OpenAPI.Clients.set_param(_ctx.query, "vote_count.gte", vote_count_gte)  # type Float32
    OpenAPI.Clients.set_param(_ctx.query, "vote_count.lte", vote_count_lte)  # type Float32
    OpenAPI.Clients.set_param(_ctx.query, "watch_region", watch_region)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_companies", with_companies)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_genres", with_genres)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_keywords", with_keywords)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_networks", with_networks)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "with_origin_country", with_origin_country)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_original_language", with_original_language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_runtime.gte", with_runtime_gte)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "with_runtime.lte", with_runtime_lte)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "with_status", with_status)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_watch_monetization_types", with_watch_monetization_types)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_watch_providers", with_watch_providers)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "without_companies", without_companies)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "without_genres", without_genres)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "without_keywords", without_keywords)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "without_watch_providers", without_watch_providers)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "with_type", with_type)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""TV

Find TV shows using over 30 filters and sort options.

Params:
- air_date_gte::Date
- air_date_lte::Date
- first_air_date_year::Int64
- first_air_date_gte::Date
- first_air_date_lte::Date
- include_adult::Bool
- include_null_first_air_dates::Bool
- language::String
- page::Int64
- screened_theatrically::Bool
- sort_by::String
- timezone::String
- vote_average_gte::Float32
- vote_average_lte::Float32
- vote_count_gte::Float32
- vote_count_lte::Float32
- watch_region::String
- with_companies::String
- with_genres::String
- with_keywords::String
- with_networks::Int64
- with_origin_country::String
- with_original_language::String
- with_runtime_gte::Int64
- with_runtime_lte::Int64
- with_status::String
- with_watch_monetization_types::String
- with_watch_providers::String
- without_companies::String
- without_genres::String
- without_keywords::String
- without_watch_providers::String
- with_type::String

Return: DiscoverTv200Response, OpenAPI.Clients.ApiResponse
"""
function discover_tv(_api::DefaultApi; air_date_gte=nothing, air_date_lte=nothing, first_air_date_year=nothing, first_air_date_gte=nothing, first_air_date_lte=nothing, include_adult=nothing, include_null_first_air_dates=nothing, language=nothing, page=nothing, screened_theatrically=nothing, sort_by=nothing, timezone=nothing, vote_average_gte=nothing, vote_average_lte=nothing, vote_count_gte=nothing, vote_count_lte=nothing, watch_region=nothing, with_companies=nothing, with_genres=nothing, with_keywords=nothing, with_networks=nothing, with_origin_country=nothing, with_original_language=nothing, with_runtime_gte=nothing, with_runtime_lte=nothing, with_status=nothing, with_watch_monetization_types=nothing, with_watch_providers=nothing, without_companies=nothing, without_genres=nothing, without_keywords=nothing, without_watch_providers=nothing, with_type=nothing, _mediaType=nothing)
    _ctx = _oacinternal_discover_tv(_api; air_date_gte=air_date_gte, air_date_lte=air_date_lte, first_air_date_year=first_air_date_year, first_air_date_gte=first_air_date_gte, first_air_date_lte=first_air_date_lte, include_adult=include_adult, include_null_first_air_dates=include_null_first_air_dates, language=language, page=page, screened_theatrically=screened_theatrically, sort_by=sort_by, timezone=timezone, vote_average_gte=vote_average_gte, vote_average_lte=vote_average_lte, vote_count_gte=vote_count_gte, vote_count_lte=vote_count_lte, watch_region=watch_region, with_companies=with_companies, with_genres=with_genres, with_keywords=with_keywords, with_networks=with_networks, with_origin_country=with_origin_country, with_original_language=with_original_language, with_runtime_gte=with_runtime_gte, with_runtime_lte=with_runtime_lte, with_status=with_status, with_watch_monetization_types=with_watch_monetization_types, with_watch_providers=with_watch_providers, without_companies=without_companies, without_genres=without_genres, without_keywords=without_keywords, without_watch_providers=without_watch_providers, with_type=with_type, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function discover_tv(_api::DefaultApi, response_stream::Channel; air_date_gte=nothing, air_date_lte=nothing, first_air_date_year=nothing, first_air_date_gte=nothing, first_air_date_lte=nothing, include_adult=nothing, include_null_first_air_dates=nothing, language=nothing, page=nothing, screened_theatrically=nothing, sort_by=nothing, timezone=nothing, vote_average_gte=nothing, vote_average_lte=nothing, vote_count_gte=nothing, vote_count_lte=nothing, watch_region=nothing, with_companies=nothing, with_genres=nothing, with_keywords=nothing, with_networks=nothing, with_origin_country=nothing, with_original_language=nothing, with_runtime_gte=nothing, with_runtime_lte=nothing, with_status=nothing, with_watch_monetization_types=nothing, with_watch_providers=nothing, without_companies=nothing, without_genres=nothing, without_keywords=nothing, without_watch_providers=nothing, with_type=nothing, _mediaType=nothing)
    _ctx = _oacinternal_discover_tv(_api; air_date_gte=air_date_gte, air_date_lte=air_date_lte, first_air_date_year=first_air_date_year, first_air_date_gte=first_air_date_gte, first_air_date_lte=first_air_date_lte, include_adult=include_adult, include_null_first_air_dates=include_null_first_air_dates, language=language, page=page, screened_theatrically=screened_theatrically, sort_by=sort_by, timezone=timezone, vote_average_gte=vote_average_gte, vote_average_lte=vote_average_lte, vote_count_gte=vote_count_gte, vote_count_lte=vote_count_lte, watch_region=watch_region, with_companies=with_companies, with_genres=with_genres, with_keywords=with_keywords, with_networks=with_networks, with_origin_country=with_origin_country, with_original_language=with_original_language, with_runtime_gte=with_runtime_gte, with_runtime_lte=with_runtime_lte, with_status=with_status, with_watch_monetization_types=with_watch_monetization_types, with_watch_providers=with_watch_providers, without_companies=without_companies, without_genres=without_genres, without_keywords=without_keywords, without_watch_providers=without_watch_providers, with_type=with_type, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_find_by_id_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FindById200Response,
)

function _oacinternal_find_by_id(_api::DefaultApi, external_id::String, external_source::String; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_find_by_id_DefaultApi, "/3/find/{external_id}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "external_id", external_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "external_source", external_source)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Find By ID

Find data by external ID's.

Params:
- external_id::String (required)
- external_source::String (required)
- language::String

Return: FindById200Response, OpenAPI.Clients.ApiResponse
"""
function find_by_id(_api::DefaultApi, external_id::String, external_source::String; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_find_by_id(_api, external_id, external_source; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function find_by_id(_api::DefaultApi, response_stream::Channel, external_id::String, external_source::String; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_find_by_id(_api, external_id, external_source; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_genre_movie_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenreMovieList200Response,
)

function _oacinternal_genre_movie_list(_api::DefaultApi; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_genre_movie_list_DefaultApi, "/3/genre/movie/list", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Movie List

Get the list of official genres for movies.

Params:
- language::String

Return: GenreMovieList200Response, OpenAPI.Clients.ApiResponse
"""
function genre_movie_list(_api::DefaultApi; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_genre_movie_list(_api; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function genre_movie_list(_api::DefaultApi, response_stream::Channel; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_genre_movie_list(_api; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_genre_tv_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenreTvList200Response,
)

function _oacinternal_genre_tv_list(_api::DefaultApi; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_genre_tv_list_DefaultApi, "/3/genre/tv/list", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""TV List

Get the list of official genres for TV shows.

Params:
- language::String

Return: GenreTvList200Response, OpenAPI.Clients.ApiResponse
"""
function genre_tv_list(_api::DefaultApi; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_genre_tv_list(_api; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function genre_tv_list(_api::DefaultApi, response_stream::Channel; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_genre_tv_list(_api; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_guest_session_rated_movies_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GuestSessionRatedMovies200Response,
)

function _oacinternal_guest_session_rated_movies(_api::DefaultApi, guest_session_id::String; language=nothing, page=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_guest_session_rated_movies_DefaultApi, "/3/guest_session/{guest_session_id}/rated/movies", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "guest_session_id", guest_session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "sort_by", sort_by)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Rated Movies

Get the rated movies for a guest session.

Params:
- guest_session_id::String (required)
- language::String
- page::Int64
- sort_by::String

Return: GuestSessionRatedMovies200Response, OpenAPI.Clients.ApiResponse
"""
function guest_session_rated_movies(_api::DefaultApi, guest_session_id::String; language=nothing, page=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_guest_session_rated_movies(_api, guest_session_id; language=language, page=page, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function guest_session_rated_movies(_api::DefaultApi, response_stream::Channel, guest_session_id::String; language=nothing, page=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_guest_session_rated_movies(_api, guest_session_id; language=language, page=page, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_guest_session_rated_tv_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GuestSessionRatedTv200Response,
)

function _oacinternal_guest_session_rated_tv(_api::DefaultApi, guest_session_id::String; language=nothing, page=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_guest_session_rated_tv_DefaultApi, "/3/guest_session/{guest_session_id}/rated/tv", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "guest_session_id", guest_session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "sort_by", sort_by)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Rated TV

Get the rated TV shows for a guest session.

Params:
- guest_session_id::String (required)
- language::String
- page::Int64
- sort_by::String

Return: GuestSessionRatedTv200Response, OpenAPI.Clients.ApiResponse
"""
function guest_session_rated_tv(_api::DefaultApi, guest_session_id::String; language=nothing, page=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_guest_session_rated_tv(_api, guest_session_id; language=language, page=page, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function guest_session_rated_tv(_api::DefaultApi, response_stream::Channel, guest_session_id::String; language=nothing, page=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_guest_session_rated_tv(_api, guest_session_id; language=language, page=page, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_guest_session_rated_tv_episodes_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GuestSessionRatedTvEpisodes200Response,
)

function _oacinternal_guest_session_rated_tv_episodes(_api::DefaultApi, guest_session_id::String; language=nothing, page=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_guest_session_rated_tv_episodes_DefaultApi, "/3/guest_session/{guest_session_id}/rated/tv/episodes", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "guest_session_id", guest_session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "sort_by", sort_by)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Rated TV Episodes

Get the rated TV episodes for a guest session.

Params:
- guest_session_id::String (required)
- language::String
- page::Int64
- sort_by::String

Return: GuestSessionRatedTvEpisodes200Response, OpenAPI.Clients.ApiResponse
"""
function guest_session_rated_tv_episodes(_api::DefaultApi, guest_session_id::String; language=nothing, page=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_guest_session_rated_tv_episodes(_api, guest_session_id; language=language, page=page, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function guest_session_rated_tv_episodes(_api::DefaultApi, response_stream::Channel, guest_session_id::String; language=nothing, page=nothing, sort_by=nothing, _mediaType=nothing)
    _ctx = _oacinternal_guest_session_rated_tv_episodes(_api, guest_session_id; language=language, page=page, sort_by=sort_by, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_keyword_details_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => KeywordDetails200Response,
)

function _oacinternal_keyword_details(_api::DefaultApi, keyword_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_keyword_details_DefaultApi, "/3/keyword/{keyword_id}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "keyword_id", keyword_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Details



Params:
- keyword_id::Int64 (required)

Return: KeywordDetails200Response, OpenAPI.Clients.ApiResponse
"""
function keyword_details(_api::DefaultApi, keyword_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_keyword_details(_api, keyword_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function keyword_details(_api::DefaultApi, response_stream::Channel, keyword_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_keyword_details(_api, keyword_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_keyword_movies_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => KeywordMovies200Response,
)

function _oacinternal_keyword_movies(_api::DefaultApi, keyword_id::String; include_adult=nothing, language=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_keyword_movies_DefaultApi, "/3/keyword/{keyword_id}/movies", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "keyword_id", keyword_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "include_adult", include_adult)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Movies



Params:
- keyword_id::String (required)
- include_adult::Bool
- language::String
- page::Int64

Return: KeywordMovies200Response, OpenAPI.Clients.ApiResponse
"""
function keyword_movies(_api::DefaultApi, keyword_id::String; include_adult=nothing, language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_keyword_movies(_api, keyword_id; include_adult=include_adult, language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function keyword_movies(_api::DefaultApi, response_stream::Channel, keyword_id::String; include_adult=nothing, language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_keyword_movies(_api, keyword_id; include_adult=include_adult, language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_add_movie_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListDelete200Response,
)

function _oacinternal_list_add_movie(_api::DefaultApi, list_id::Int64, session_id::String; list_add_movie_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_list_add_movie_DefaultApi, "/3/list/{list_id}/add_item", ["sec0", ], list_add_movie_request)
    OpenAPI.Clients.set_param(_ctx.path, "list_id", list_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Add Movie

Add a movie to a list.

Params:
- list_id::Int64 (required)
- session_id::String (required)
- list_add_movie_request::ListAddMovieRequest

Return: ListDelete200Response, OpenAPI.Clients.ApiResponse
"""
function list_add_movie(_api::DefaultApi, list_id::Int64, session_id::String; list_add_movie_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_add_movie(_api, list_id, session_id; list_add_movie_request=list_add_movie_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_add_movie(_api::DefaultApi, response_stream::Channel, list_id::Int64, session_id::String; list_add_movie_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_add_movie(_api, list_id, session_id; list_add_movie_request=list_add_movie_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_check_item_status_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListCheckItemStatus200Response,
)

function _oacinternal_list_check_item_status(_api::DefaultApi, list_id::Int64; language=nothing, movie_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_check_item_status_DefaultApi, "/3/list/{list_id}/item_status", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "list_id", list_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Check Item Status

Use this method to check if an item has already been added to the list.

Params:
- list_id::Int64 (required)
- language::String
- movie_id::Int64

Return: ListCheckItemStatus200Response, OpenAPI.Clients.ApiResponse
"""
function list_check_item_status(_api::DefaultApi, list_id::Int64; language=nothing, movie_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_check_item_status(_api, list_id; language=language, movie_id=movie_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_check_item_status(_api::DefaultApi, response_stream::Channel, list_id::Int64; language=nothing, movie_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_check_item_status(_api, list_id; language=language, movie_id=movie_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_clear_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListDelete200Response,
)

function _oacinternal_list_clear(_api::DefaultApi, list_id::Int64, session_id::String, confirm::Bool; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_list_clear_DefaultApi, "/3/list/{list_id}/clear", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "list_id", list_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "confirm", confirm)  # type Bool
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Clear

Clear all items from a list.

Params:
- list_id::Int64 (required)
- session_id::String (required)
- confirm::Bool (required)

Return: ListDelete200Response, OpenAPI.Clients.ApiResponse
"""
function list_clear(_api::DefaultApi, list_id::Int64, session_id::String, confirm::Bool; _mediaType=nothing)
    _ctx = _oacinternal_list_clear(_api, list_id, session_id, confirm; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_clear(_api::DefaultApi, response_stream::Channel, list_id::Int64, session_id::String, confirm::Bool; _mediaType=nothing)
    _ctx = _oacinternal_list_clear(_api, list_id, session_id, confirm; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_create_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListCreate200Response,
)

function _oacinternal_list_create(_api::DefaultApi, session_id::String; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_list_create_DefaultApi, "/3/list", ["sec0", ], movie_add_rating_request)
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create



Params:
- session_id::String (required)
- movie_add_rating_request::MovieAddRatingRequest

Return: ListCreate200Response, OpenAPI.Clients.ApiResponse
"""
function list_create(_api::DefaultApi, session_id::String; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_create(_api, session_id; movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_create(_api::DefaultApi, response_stream::Channel, session_id::String; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_create(_api, session_id; movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_delete_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListDelete200Response,
)

function _oacinternal_list_delete(_api::DefaultApi, list_id::Int64, session_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_list_delete_DefaultApi, "/3/list/{list_id}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "list_id", list_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete

Delete a list.

Params:
- list_id::Int64 (required)
- session_id::String (required)

Return: ListDelete200Response, OpenAPI.Clients.ApiResponse
"""
function list_delete(_api::DefaultApi, list_id::Int64, session_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_delete(_api, list_id, session_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_delete(_api::DefaultApi, response_stream::Channel, list_id::Int64, session_id::String; _mediaType=nothing)
    _ctx = _oacinternal_list_delete(_api, list_id, session_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_details_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListDetails200Response,
)

function _oacinternal_list_details(_api::DefaultApi, list_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_details_DefaultApi, "/3/list/{list_id}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "list_id", list_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Details



Params:
- list_id::Int64 (required)
- language::String
- page::Int64

Return: ListDetails200Response, OpenAPI.Clients.ApiResponse
"""
function list_details(_api::DefaultApi, list_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_details(_api, list_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_details(_api::DefaultApi, response_stream::Channel, list_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_details(_api, list_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_remove_movie_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieDeleteRating200Response,
)

function _oacinternal_list_remove_movie(_api::DefaultApi, list_id::Int64, session_id::String; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_list_remove_movie_DefaultApi, "/3/list/{list_id}/remove_item", ["sec0", ], movie_add_rating_request)
    OpenAPI.Clients.set_param(_ctx.path, "list_id", list_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Remove Movie

Remove a movie from a list.

Params:
- list_id::Int64 (required)
- session_id::String (required)
- movie_add_rating_request::MovieAddRatingRequest

Return: MovieDeleteRating200Response, OpenAPI.Clients.ApiResponse
"""
function list_remove_movie(_api::DefaultApi, list_id::Int64, session_id::String; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_remove_movie(_api, list_id, session_id; movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_remove_movie(_api::DefaultApi, response_stream::Channel, list_id::Int64, session_id::String; movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_remove_movie(_api, list_id, session_id; movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_lists_copy_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListsCopy200Response,
)

function _oacinternal_lists_copy(_api::DefaultApi, series_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_lists_copy_DefaultApi, "/3/tv/{series_id}/lists", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists

Get the lists that a TV series has been added to.

Params:
- series_id::Int64 (required)
- language::String
- page::Int64

Return: ListsCopy200Response, OpenAPI.Clients.ApiResponse
"""
function lists_copy(_api::DefaultApi, series_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_lists_copy(_api, series_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function lists_copy(_api::DefaultApi, response_stream::Channel, series_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_lists_copy(_api, series_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_account_states_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieAccountStates200Response,
)

function _oacinternal_movie_account_states(_api::DefaultApi, movie_id::Int64; session_id=nothing, guest_session_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_account_states_DefaultApi, "/3/movie/{movie_id}/account_states", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "guest_session_id", guest_session_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Account States

Get the rating, watchlist and favourite status of an account.

Params:
- movie_id::Int64 (required)
- session_id::String
- guest_session_id::String

Return: MovieAccountStates200Response, OpenAPI.Clients.ApiResponse
"""
function movie_account_states(_api::DefaultApi, movie_id::Int64; session_id=nothing, guest_session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_account_states(_api, movie_id; session_id=session_id, guest_session_id=guest_session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_account_states(_api::DefaultApi, response_stream::Channel, movie_id::Int64; session_id=nothing, guest_session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_account_states(_api, movie_id; session_id=session_id, guest_session_id=guest_session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_add_rating_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieAddRating200Response,
)

function _oacinternal_movie_add_rating(_api::DefaultApi, movie_id::Int64, content_type::String; guest_session_id=nothing, session_id=nothing, movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_movie_add_rating_DefaultApi, "/3/movie/{movie_id}/rating", ["sec0", ], movie_add_rating_request)
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "guest_session_id", guest_session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Content-Type", content_type)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Add Rating

Rate a movie and save it to your rated list.

Params:
- movie_id::Int64 (required)
- content_type::String (required)
- guest_session_id::String
- session_id::String
- movie_add_rating_request::MovieAddRatingRequest

Return: MovieAddRating200Response, OpenAPI.Clients.ApiResponse
"""
function movie_add_rating(_api::DefaultApi, movie_id::Int64, content_type::String; guest_session_id=nothing, session_id=nothing, movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_add_rating(_api, movie_id, content_type; guest_session_id=guest_session_id, session_id=session_id, movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_add_rating(_api::DefaultApi, response_stream::Channel, movie_id::Int64, content_type::String; guest_session_id=nothing, session_id=nothing, movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_add_rating(_api, movie_id, content_type; guest_session_id=guest_session_id, session_id=session_id, movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_alternative_titles_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieAlternativeTitles200Response,
)

function _oacinternal_movie_alternative_titles(_api::DefaultApi, movie_id::Int64; country=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_alternative_titles_DefaultApi, "/3/movie/{movie_id}/alternative_titles", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "country", country)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Alternative Titles

Get the alternative titles for a movie.

Params:
- movie_id::Int64 (required)
- country::String

Return: MovieAlternativeTitles200Response, OpenAPI.Clients.ApiResponse
"""
function movie_alternative_titles(_api::DefaultApi, movie_id::Int64; country=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_alternative_titles(_api, movie_id; country=country, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_alternative_titles(_api::DefaultApi, response_stream::Channel, movie_id::Int64; country=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_alternative_titles(_api, movie_id; country=country, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_changes_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieChanges200Response,
)

function _oacinternal_movie_changes(_api::DefaultApi, movie_id::Int64; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_changes_DefaultApi, "/3/movie/{movie_id}/changes", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "end_date", end_date)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "start_date", start_date)  # type Date
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Changes

Get the recent changes for a movie.

Params:
- movie_id::Int64 (required)
- end_date::Date
- page::Int64
- start_date::Date

Return: MovieChanges200Response, OpenAPI.Clients.ApiResponse
"""
function movie_changes(_api::DefaultApi, movie_id::Int64; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_changes(_api, movie_id; end_date=end_date, page=page, start_date=start_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_changes(_api::DefaultApi, response_stream::Channel, movie_id::Int64; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_changes(_api, movie_id; end_date=end_date, page=page, start_date=start_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_credits_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieCredits200Response,
)

function _oacinternal_movie_credits(_api::DefaultApi, movie_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_credits_DefaultApi, "/3/movie/{movie_id}/credits", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Credits



Params:
- movie_id::Int64 (required)
- language::String

Return: MovieCredits200Response, OpenAPI.Clients.ApiResponse
"""
function movie_credits(_api::DefaultApi, movie_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_credits(_api, movie_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_credits(_api::DefaultApi, response_stream::Channel, movie_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_credits(_api, movie_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_delete_rating_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieDeleteRating200Response,
)

function _oacinternal_movie_delete_rating(_api::DefaultApi, movie_id::Int64; content_type=nothing, guest_session_id=nothing, session_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_movie_delete_rating_DefaultApi, "/3/movie/{movie_id}/rating", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "guest_session_id", guest_session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Content-Type", content_type)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Rating

Delete a user rating.

Params:
- movie_id::Int64 (required)
- content_type::String
- guest_session_id::String
- session_id::String

Return: MovieDeleteRating200Response, OpenAPI.Clients.ApiResponse
"""
function movie_delete_rating(_api::DefaultApi, movie_id::Int64; content_type=nothing, guest_session_id=nothing, session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_delete_rating(_api, movie_id; content_type=content_type, guest_session_id=guest_session_id, session_id=session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_delete_rating(_api::DefaultApi, response_stream::Channel, movie_id::Int64; content_type=nothing, guest_session_id=nothing, session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_delete_rating(_api, movie_id; content_type=content_type, guest_session_id=guest_session_id, session_id=session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_details_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieDetails200Response,
)

function _oacinternal_movie_details(_api::DefaultApi, movie_id::Int64; append_to_response=nothing, language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_details_DefaultApi, "/3/movie/{movie_id}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "append_to_response", append_to_response)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Details

Get the top level details of a movie by ID.

Params:
- movie_id::Int64 (required)
- append_to_response::String
- language::String

Return: MovieDetails200Response, OpenAPI.Clients.ApiResponse
"""
function movie_details(_api::DefaultApi, movie_id::Int64; append_to_response=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_details(_api, movie_id; append_to_response=append_to_response, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_details(_api::DefaultApi, response_stream::Channel, movie_id::Int64; append_to_response=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_details(_api, movie_id; append_to_response=append_to_response, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_external_ids_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieExternalIds200Response,
)

function _oacinternal_movie_external_ids(_api::DefaultApi, movie_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_external_ids_DefaultApi, "/3/movie/{movie_id}/external_ids", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""External IDs



Params:
- movie_id::Int64 (required)

Return: MovieExternalIds200Response, OpenAPI.Clients.ApiResponse
"""
function movie_external_ids(_api::DefaultApi, movie_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_movie_external_ids(_api, movie_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_external_ids(_api::DefaultApi, response_stream::Channel, movie_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_movie_external_ids(_api, movie_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_images_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieImages200Response,
)

function _oacinternal_movie_images(_api::DefaultApi, movie_id::Int64; include_image_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_images_DefaultApi, "/3/movie/{movie_id}/images", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "include_image_language", include_image_language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Images

Get the images that belong to a movie.

Params:
- movie_id::Int64 (required)
- include_image_language::String
- language::String

Return: MovieImages200Response, OpenAPI.Clients.ApiResponse
"""
function movie_images(_api::DefaultApi, movie_id::Int64; include_image_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_images(_api, movie_id; include_image_language=include_image_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_images(_api::DefaultApi, response_stream::Channel, movie_id::Int64; include_image_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_images(_api, movie_id; include_image_language=include_image_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_keywords_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieKeywords200Response,
)

function _oacinternal_movie_keywords(_api::DefaultApi, movie_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_keywords_DefaultApi, "/3/movie/{movie_id}/keywords", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Keywords



Params:
- movie_id::String (required)

Return: MovieKeywords200Response, OpenAPI.Clients.ApiResponse
"""
function movie_keywords(_api::DefaultApi, movie_id::String; _mediaType=nothing)
    _ctx = _oacinternal_movie_keywords(_api, movie_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_keywords(_api::DefaultApi, response_stream::Channel, movie_id::String; _mediaType=nothing)
    _ctx = _oacinternal_movie_keywords(_api, movie_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_latest_id_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieLatestId200Response,
)

function _oacinternal_movie_latest_id(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_latest_id_DefaultApi, "/3/movie/latest", ["sec0", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Latest

Get the newest movie ID.

Params:

Return: MovieLatestId200Response, OpenAPI.Clients.ApiResponse
"""
function movie_latest_id(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_movie_latest_id(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_latest_id(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_movie_latest_id(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_lists_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieLists200Response,
)

function _oacinternal_movie_lists(_api::DefaultApi, movie_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_lists_DefaultApi, "/3/movie/{movie_id}/lists", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists

Get the lists that a movie has been added to.

Params:
- movie_id::Int64 (required)
- language::String
- page::Int64

Return: MovieLists200Response, OpenAPI.Clients.ApiResponse
"""
function movie_lists(_api::DefaultApi, movie_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_lists(_api, movie_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_lists(_api::DefaultApi, response_stream::Channel, movie_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_lists(_api, movie_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_now_playing_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieNowPlayingList200Response,
)

function _oacinternal_movie_now_playing_list(_api::DefaultApi; language=nothing, page=nothing, region=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_now_playing_list_DefaultApi, "/3/movie/now_playing", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "region", region)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Now Playing

Get a list of movies that are currently in theatres.

Params:
- language::String
- page::Int64
- region::String

Return: MovieNowPlayingList200Response, OpenAPI.Clients.ApiResponse
"""
function movie_now_playing_list(_api::DefaultApi; language=nothing, page=nothing, region=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_now_playing_list(_api; language=language, page=page, region=region, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_now_playing_list(_api::DefaultApi, response_stream::Channel; language=nothing, page=nothing, region=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_now_playing_list(_api; language=language, page=page, region=region, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_popular_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MoviePopularList200Response,
)

function _oacinternal_movie_popular_list(_api::DefaultApi; language=nothing, page=nothing, region=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_popular_list_DefaultApi, "/3/movie/popular", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "region", region)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Popular

Get a list of movies ordered by popularity.

Params:
- language::String
- page::Int64
- region::String

Return: MoviePopularList200Response, OpenAPI.Clients.ApiResponse
"""
function movie_popular_list(_api::DefaultApi; language=nothing, page=nothing, region=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_popular_list(_api; language=language, page=page, region=region, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_popular_list(_api::DefaultApi, response_stream::Channel; language=nothing, page=nothing, region=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_popular_list(_api; language=language, page=page, region=region, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_recommendations_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Any,
)

function _oacinternal_movie_recommendations(_api::DefaultApi, movie_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_recommendations_DefaultApi, "/3/movie/{movie_id}/recommendations", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Recommendations



Params:
- movie_id::Int64 (required)
- language::String
- page::Int64

Return: Any, OpenAPI.Clients.ApiResponse
"""
function movie_recommendations(_api::DefaultApi, movie_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_recommendations(_api, movie_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_recommendations(_api::DefaultApi, response_stream::Channel, movie_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_recommendations(_api, movie_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_release_dates_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieReleaseDates200Response,
)

function _oacinternal_movie_release_dates(_api::DefaultApi, movie_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_release_dates_DefaultApi, "/3/movie/{movie_id}/release_dates", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Release Dates

Get the release dates and certifications for a movie.

Params:
- movie_id::Int64 (required)

Return: MovieReleaseDates200Response, OpenAPI.Clients.ApiResponse
"""
function movie_release_dates(_api::DefaultApi, movie_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_movie_release_dates(_api, movie_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_release_dates(_api::DefaultApi, response_stream::Channel, movie_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_movie_release_dates(_api, movie_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_reviews_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieReviews200Response,
)

function _oacinternal_movie_reviews(_api::DefaultApi, movie_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_reviews_DefaultApi, "/3/movie/{movie_id}/reviews", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Reviews

Get the user reviews for a movie.

Params:
- movie_id::Int64 (required)
- language::String
- page::Int64

Return: MovieReviews200Response, OpenAPI.Clients.ApiResponse
"""
function movie_reviews(_api::DefaultApi, movie_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_reviews(_api, movie_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_reviews(_api::DefaultApi, response_stream::Channel, movie_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_reviews(_api, movie_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_similar_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieSimilar200Response,
)

function _oacinternal_movie_similar(_api::DefaultApi, movie_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_similar_DefaultApi, "/3/movie/{movie_id}/similar", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Similar

Get the similar movies based on genres and keywords.

Params:
- movie_id::Int64 (required)
- language::String
- page::Int64

Return: MovieSimilar200Response, OpenAPI.Clients.ApiResponse
"""
function movie_similar(_api::DefaultApi, movie_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_similar(_api, movie_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_similar(_api::DefaultApi, response_stream::Channel, movie_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_similar(_api, movie_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_top_rated_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieTopRatedList200Response,
)

function _oacinternal_movie_top_rated_list(_api::DefaultApi; language=nothing, page=nothing, region=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_top_rated_list_DefaultApi, "/3/movie/top_rated", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "region", region)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Top Rated

Get a list of movies ordered by rating.

Params:
- language::String
- page::Int64
- region::String

Return: MovieTopRatedList200Response, OpenAPI.Clients.ApiResponse
"""
function movie_top_rated_list(_api::DefaultApi; language=nothing, page=nothing, region=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_top_rated_list(_api; language=language, page=page, region=region, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_top_rated_list(_api::DefaultApi, response_stream::Channel; language=nothing, page=nothing, region=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_top_rated_list(_api; language=language, page=page, region=region, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_translations_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieTranslations200Response,
)

function _oacinternal_movie_translations(_api::DefaultApi, movie_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_translations_DefaultApi, "/3/movie/{movie_id}/translations", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Translations

Get the translations for a movie.

Params:
- movie_id::Int64 (required)

Return: MovieTranslations200Response, OpenAPI.Clients.ApiResponse
"""
function movie_translations(_api::DefaultApi, movie_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_movie_translations(_api, movie_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_translations(_api::DefaultApi, response_stream::Channel, movie_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_movie_translations(_api, movie_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_upcoming_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieUpcomingList200Response,
)

function _oacinternal_movie_upcoming_list(_api::DefaultApi; language=nothing, page=nothing, region=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_upcoming_list_DefaultApi, "/3/movie/upcoming", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "region", region)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Upcoming

Get a list of movies that are being released soon.

Params:
- language::String
- page::Int64
- region::String

Return: MovieUpcomingList200Response, OpenAPI.Clients.ApiResponse
"""
function movie_upcoming_list(_api::DefaultApi; language=nothing, page=nothing, region=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_upcoming_list(_api; language=language, page=page, region=region, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_upcoming_list(_api::DefaultApi, response_stream::Channel; language=nothing, page=nothing, region=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_upcoming_list(_api; language=language, page=page, region=region, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_videos_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieVideos200Response,
)

function _oacinternal_movie_videos(_api::DefaultApi, movie_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_videos_DefaultApi, "/3/movie/{movie_id}/videos", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Videos



Params:
- movie_id::Int64 (required)
- language::String

Return: MovieVideos200Response, OpenAPI.Clients.ApiResponse
"""
function movie_videos(_api::DefaultApi, movie_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_videos(_api, movie_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_videos(_api::DefaultApi, response_stream::Channel, movie_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_movie_videos(_api, movie_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_movie_watch_providers_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieWatchProviders200Response,
)

function _oacinternal_movie_watch_providers(_api::DefaultApi, movie_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_movie_watch_providers_DefaultApi, "/3/movie/{movie_id}/watch/providers", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "movie_id", movie_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Watch Providers

Get the list of streaming providers we have for a movie.

Params:
- movie_id::Int64 (required)

Return: MovieWatchProviders200Response, OpenAPI.Clients.ApiResponse
"""
function movie_watch_providers(_api::DefaultApi, movie_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_movie_watch_providers(_api, movie_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function movie_watch_providers(_api::DefaultApi, response_stream::Channel, movie_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_movie_watch_providers(_api, movie_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_details_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NetworkDetails200Response,
)

function _oacinternal_network_details(_api::DefaultApi, network_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_network_details_DefaultApi, "/3/network/{network_id}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "network_id", network_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Details



Params:
- network_id::Int64 (required)

Return: NetworkDetails200Response, OpenAPI.Clients.ApiResponse
"""
function network_details(_api::DefaultApi, network_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_network_details(_api, network_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_details(_api::DefaultApi, response_stream::Channel, network_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_network_details(_api, network_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_person_changes_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonChanges200Response,
)

function _oacinternal_person_changes(_api::DefaultApi, person_id::Int64; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_person_changes_DefaultApi, "/3/person/{person_id}/changes", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "person_id", person_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "end_date", end_date)  # type Date
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "start_date", start_date)  # type Date
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Changes

Get the recent changes for a person.

Params:
- person_id::Int64 (required)
- end_date::Date
- page::Int64
- start_date::Date

Return: PersonChanges200Response, OpenAPI.Clients.ApiResponse
"""
function person_changes(_api::DefaultApi, person_id::Int64; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_person_changes(_api, person_id; end_date=end_date, page=page, start_date=start_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function person_changes(_api::DefaultApi, response_stream::Channel, person_id::Int64; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_person_changes(_api, person_id; end_date=end_date, page=page, start_date=start_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_person_combined_credits_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonCombinedCredits200Response,
)

function _oacinternal_person_combined_credits(_api::DefaultApi, person_id::String; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_person_combined_credits_DefaultApi, "/3/person/{person_id}/combined_credits", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "person_id", person_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Combined Credits

Get the combined movie and TV credits that belong to a person.

Params:
- person_id::String (required)
- language::String

Return: PersonCombinedCredits200Response, OpenAPI.Clients.ApiResponse
"""
function person_combined_credits(_api::DefaultApi, person_id::String; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_person_combined_credits(_api, person_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function person_combined_credits(_api::DefaultApi, response_stream::Channel, person_id::String; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_person_combined_credits(_api, person_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_person_details_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonDetails200Response,
)

function _oacinternal_person_details(_api::DefaultApi, person_id::Int64; append_to_response=nothing, language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_person_details_DefaultApi, "/3/person/{person_id}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "person_id", person_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "append_to_response", append_to_response)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Details

Query the top level details of a person.

Params:
- person_id::Int64 (required)
- append_to_response::String
- language::String

Return: PersonDetails200Response, OpenAPI.Clients.ApiResponse
"""
function person_details(_api::DefaultApi, person_id::Int64; append_to_response=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_person_details(_api, person_id; append_to_response=append_to_response, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function person_details(_api::DefaultApi, response_stream::Channel, person_id::Int64; append_to_response=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_person_details(_api, person_id; append_to_response=append_to_response, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_person_external_ids_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonExternalIds200Response,
)

function _oacinternal_person_external_ids(_api::DefaultApi, person_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_person_external_ids_DefaultApi, "/3/person/{person_id}/external_ids", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "person_id", person_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""External IDs

Get the external ID's that belong to a person.

Params:
- person_id::Int64 (required)

Return: PersonExternalIds200Response, OpenAPI.Clients.ApiResponse
"""
function person_external_ids(_api::DefaultApi, person_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_person_external_ids(_api, person_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function person_external_ids(_api::DefaultApi, response_stream::Channel, person_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_person_external_ids(_api, person_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_person_images_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonImages200Response,
)

function _oacinternal_person_images(_api::DefaultApi, person_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_person_images_DefaultApi, "/3/person/{person_id}/images", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "person_id", person_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Images

Get the profile images that belong to a person.

Params:
- person_id::Int64 (required)

Return: PersonImages200Response, OpenAPI.Clients.ApiResponse
"""
function person_images(_api::DefaultApi, person_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_person_images(_api, person_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function person_images(_api::DefaultApi, response_stream::Channel, person_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_person_images(_api, person_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_person_latest_id_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonLatestId200Response,
)

function _oacinternal_person_latest_id(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_person_latest_id_DefaultApi, "/3/person/latest", ["sec0", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Latest

Get the newest created person. This is a live response and will continuously change.

Params:

Return: PersonLatestId200Response, OpenAPI.Clients.ApiResponse
"""
function person_latest_id(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_person_latest_id(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function person_latest_id(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_person_latest_id(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_person_movie_credits_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonMovieCredits200Response,
)

function _oacinternal_person_movie_credits(_api::DefaultApi, person_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_person_movie_credits_DefaultApi, "/3/person/{person_id}/movie_credits", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "person_id", person_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Movie Credits

Get the movie credits for a person.

Params:
- person_id::Int64 (required)
- language::String

Return: PersonMovieCredits200Response, OpenAPI.Clients.ApiResponse
"""
function person_movie_credits(_api::DefaultApi, person_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_person_movie_credits(_api, person_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function person_movie_credits(_api::DefaultApi, response_stream::Channel, person_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_person_movie_credits(_api, person_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_person_popular_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonPopularList200Response,
)

function _oacinternal_person_popular_list(_api::DefaultApi; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_person_popular_list_DefaultApi, "/3/person/popular", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Popular

Get a list of people ordered by popularity.

Params:
- language::String
- page::Int64

Return: PersonPopularList200Response, OpenAPI.Clients.ApiResponse
"""
function person_popular_list(_api::DefaultApi; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_person_popular_list(_api; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function person_popular_list(_api::DefaultApi, response_stream::Channel; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_person_popular_list(_api; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_person_tagged_images_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonTaggedImages200Response,
)

function _oacinternal_person_tagged_images(_api::DefaultApi, person_id::Int64; page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_person_tagged_images_DefaultApi, "/3/person/{person_id}/tagged_images", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "person_id", person_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Tagged Images

Get the tagged images for a person.

Params:
- person_id::Int64 (required)
- page::Int64

Return: PersonTaggedImages200Response, OpenAPI.Clients.ApiResponse
"""
function person_tagged_images(_api::DefaultApi, person_id::Int64; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_person_tagged_images(_api, person_id; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function person_tagged_images(_api::DefaultApi, response_stream::Channel, person_id::Int64; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_person_tagged_images(_api, person_id; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_person_tv_credits_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PersonTvCredits200Response,
)

function _oacinternal_person_tv_credits(_api::DefaultApi, person_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_person_tv_credits_DefaultApi, "/3/person/{person_id}/tv_credits", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "person_id", person_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""TV Credits

Get the TV credits that belong to a person.

Params:
- person_id::Int64 (required)
- language::String

Return: PersonTvCredits200Response, OpenAPI.Clients.ApiResponse
"""
function person_tv_credits(_api::DefaultApi, person_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_person_tv_credits(_api, person_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function person_tv_credits(_api::DefaultApi, response_stream::Channel, person_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_person_tv_credits(_api, person_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_review_details_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ReviewDetails200Response,
)

function _oacinternal_review_details(_api::DefaultApi, review_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_review_details_DefaultApi, "/3/review/{review_id}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "review_id", review_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Details

Retrieve the details of a movie or TV show review.

Params:
- review_id::String (required)

Return: ReviewDetails200Response, OpenAPI.Clients.ApiResponse
"""
function review_details(_api::DefaultApi, review_id::String; _mediaType=nothing)
    _ctx = _oacinternal_review_details(_api, review_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function review_details(_api::DefaultApi, response_stream::Channel, review_id::String; _mediaType=nothing)
    _ctx = _oacinternal_review_details(_api, review_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_collection_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SearchCollection200Response,
)

function _oacinternal_search_collection(_api::DefaultApi, query::String; include_adult=nothing, language=nothing, page=nothing, region=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_collection_DefaultApi, "/3/search/collection", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "query", query)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "include_adult", include_adult)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "region", region)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Collection

Search for collections by their original, translated and alternative names.

Params:
- query::String (required)
- include_adult::Bool
- language::String
- page::Int64
- region::String

Return: SearchCollection200Response, OpenAPI.Clients.ApiResponse
"""
function search_collection(_api::DefaultApi, query::String; include_adult=nothing, language=nothing, page=nothing, region=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_collection(_api, query; include_adult=include_adult, language=language, page=page, region=region, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_collection(_api::DefaultApi, response_stream::Channel, query::String; include_adult=nothing, language=nothing, page=nothing, region=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_collection(_api, query; include_adult=include_adult, language=language, page=page, region=region, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_company_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SearchCompany200Response,
)

function _oacinternal_search_company(_api::DefaultApi, query::String; page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_company_DefaultApi, "/3/search/company", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "query", query)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Company

Search for companies by their original and alternative names.

Params:
- query::String (required)
- page::Int64

Return: SearchCompany200Response, OpenAPI.Clients.ApiResponse
"""
function search_company(_api::DefaultApi, query::String; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_company(_api, query; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_company(_api::DefaultApi, response_stream::Channel, query::String; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_company(_api, query; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_keyword_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SearchKeyword200Response,
)

function _oacinternal_search_keyword(_api::DefaultApi, query::String; page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_keyword_DefaultApi, "/3/search/keyword", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "query", query)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Keyword

Search for keywords by their name.

Params:
- query::String (required)
- page::Int64

Return: SearchKeyword200Response, OpenAPI.Clients.ApiResponse
"""
function search_keyword(_api::DefaultApi, query::String; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_keyword(_api, query; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_keyword(_api::DefaultApi, response_stream::Channel, query::String; page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_keyword(_api, query; page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_movie_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SearchMovie200Response,
)

function _oacinternal_search_movie(_api::DefaultApi, query::String; include_adult=nothing, language=nothing, primary_release_year=nothing, page=nothing, region=nothing, year=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_movie_DefaultApi, "/3/search/movie", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "query", query)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "include_adult", include_adult)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "primary_release_year", primary_release_year)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "region", region)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "year", year)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Movie

Search for movies by their original, translated and alternative titles.

Params:
- query::String (required)
- include_adult::Bool
- language::String
- primary_release_year::String
- page::Int64
- region::String
- year::String

Return: SearchMovie200Response, OpenAPI.Clients.ApiResponse
"""
function search_movie(_api::DefaultApi, query::String; include_adult=nothing, language=nothing, primary_release_year=nothing, page=nothing, region=nothing, year=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_movie(_api, query; include_adult=include_adult, language=language, primary_release_year=primary_release_year, page=page, region=region, year=year, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_movie(_api::DefaultApi, response_stream::Channel, query::String; include_adult=nothing, language=nothing, primary_release_year=nothing, page=nothing, region=nothing, year=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_movie(_api, query; include_adult=include_adult, language=language, primary_release_year=primary_release_year, page=page, region=region, year=year, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_multi_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SearchMulti200Response,
)

function _oacinternal_search_multi(_api::DefaultApi, query::String; include_adult=nothing, language=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_multi_DefaultApi, "/3/search/multi", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "query", query)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "include_adult", include_adult)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Multi

Use multi search when you want to search for movies, TV shows and people in a single request.

Params:
- query::String (required)
- include_adult::Bool
- language::String
- page::Int64

Return: SearchMulti200Response, OpenAPI.Clients.ApiResponse
"""
function search_multi(_api::DefaultApi, query::String; include_adult=nothing, language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_multi(_api, query; include_adult=include_adult, language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_multi(_api::DefaultApi, response_stream::Channel, query::String; include_adult=nothing, language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_multi(_api, query; include_adult=include_adult, language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_person_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SearchPerson200Response,
)

function _oacinternal_search_person(_api::DefaultApi, query::String; include_adult=nothing, language=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_person_DefaultApi, "/3/search/person", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "query", query)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "include_adult", include_adult)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Person

Search for people by their name and also known as names.

Params:
- query::String (required)
- include_adult::Bool
- language::String
- page::Int64

Return: SearchPerson200Response, OpenAPI.Clients.ApiResponse
"""
function search_person(_api::DefaultApi, query::String; include_adult=nothing, language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_person(_api, query; include_adult=include_adult, language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_person(_api::DefaultApi, response_stream::Channel, query::String; include_adult=nothing, language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_person(_api, query; include_adult=include_adult, language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_search_tv_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SearchTv200Response,
)

function _oacinternal_search_tv(_api::DefaultApi, query::String; first_air_date_year=nothing, include_adult=nothing, language=nothing, page=nothing, year=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_search_tv_DefaultApi, "/3/search/tv", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "query", query)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "first_air_date_year", first_air_date_year)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "include_adult", include_adult)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "year", year)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""TV

Search for TV shows by their original, translated and also known as names.

Params:
- query::String (required)
- first_air_date_year::Int64
- include_adult::Bool
- language::String
- page::Int64
- year::Int64

Return: SearchTv200Response, OpenAPI.Clients.ApiResponse
"""
function search_tv(_api::DefaultApi, query::String; first_air_date_year=nothing, include_adult=nothing, language=nothing, page=nothing, year=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_tv(_api, query; first_air_date_year=first_air_date_year, include_adult=include_adult, language=language, page=page, year=year, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function search_tv(_api::DefaultApi, response_stream::Channel, query::String; first_air_date_year=nothing, include_adult=nothing, language=nothing, page=nothing, year=nothing, _mediaType=nothing)
    _ctx = _oacinternal_search_tv(_api, query; first_air_date_year=first_air_date_year, include_adult=include_adult, language=language, page=page, year=year, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_translations_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Translations200Response,
)

function _oacinternal_translations(_api::DefaultApi, person_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_translations_DefaultApi, "/3/person/{person_id}/translations", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "person_id", person_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Translations

Get the translations that belong to a person.

Params:
- person_id::Int64 (required)

Return: Translations200Response, OpenAPI.Clients.ApiResponse
"""
function translations(_api::DefaultApi, person_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_translations(_api, person_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function translations(_api::DefaultApi, response_stream::Channel, person_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_translations(_api, person_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_trending_all_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TrendingAll200Response,
)

function _oacinternal_trending_all(_api::DefaultApi, time_window::String; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_trending_all_DefaultApi, "/3/trending/all/{time_window}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "time_window", time_window)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""All

Get the trending movies, TV shows and people.

Params:
- time_window::String (required)
- language::String

Return: TrendingAll200Response, OpenAPI.Clients.ApiResponse
"""
function trending_all(_api::DefaultApi, time_window::String; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_trending_all(_api, time_window; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function trending_all(_api::DefaultApi, response_stream::Channel, time_window::String; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_trending_all(_api, time_window; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_trending_movies_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TrendingAll200Response,
)

function _oacinternal_trending_movies(_api::DefaultApi, time_window::String; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_trending_movies_DefaultApi, "/3/trending/movie/{time_window}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "time_window", time_window)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Movies

Get the trending movies on TMDB.

Params:
- time_window::String (required)
- language::String

Return: TrendingAll200Response, OpenAPI.Clients.ApiResponse
"""
function trending_movies(_api::DefaultApi, time_window::String; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_trending_movies(_api, time_window; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function trending_movies(_api::DefaultApi, response_stream::Channel, time_window::String; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_trending_movies(_api, time_window; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_trending_people_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TrendingPeople200Response,
)

function _oacinternal_trending_people(_api::DefaultApi, time_window::String; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_trending_people_DefaultApi, "/3/trending/person/{time_window}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "time_window", time_window)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""People

Get the trending people on TMDB.

Params:
- time_window::String (required)
- language::String

Return: TrendingPeople200Response, OpenAPI.Clients.ApiResponse
"""
function trending_people(_api::DefaultApi, time_window::String; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_trending_people(_api, time_window; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function trending_people(_api::DefaultApi, response_stream::Channel, time_window::String; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_trending_people(_api, time_window; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_trending_tv_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TrendingTv200Response,
)

function _oacinternal_trending_tv(_api::DefaultApi, time_window::String; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_trending_tv_DefaultApi, "/3/trending/tv/{time_window}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "time_window", time_window)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""TV

Get the trending TV shows on TMDB.

Params:
- time_window::String (required)
- language::String

Return: TrendingTv200Response, OpenAPI.Clients.ApiResponse
"""
function trending_tv(_api::DefaultApi, time_window::String; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_trending_tv(_api, time_window; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function trending_tv(_api::DefaultApi, response_stream::Channel, time_window::String; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_trending_tv(_api, time_window; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_episode_account_states_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieAccountStates200Response,
)

function _oacinternal_tv_episode_account_states(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::Int64; session_id=nothing, guest_session_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_episode_account_states_DefaultApi, "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/account_states", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "episode_number", episode_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "guest_session_id", guest_session_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Account States

Get the rating, watchlist and favourite status.

Params:
- series_id::Int64 (required)
- season_number::Int64 (required)
- episode_number::Int64 (required)
- session_id::String
- guest_session_id::String

Return: MovieAccountStates200Response, OpenAPI.Clients.ApiResponse
"""
function tv_episode_account_states(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::Int64; session_id=nothing, guest_session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_account_states(_api, series_id, season_number, episode_number; session_id=session_id, guest_session_id=guest_session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_episode_account_states(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64, episode_number::Int64; session_id=nothing, guest_session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_account_states(_api, series_id, season_number, episode_number; session_id=session_id, guest_session_id=guest_session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_episode_add_rating_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieAddRating200Response,
)

function _oacinternal_tv_episode_add_rating(_api::DefaultApi, series_id::Int64, content_type::String, season_number::Int64, episode_number::Int64; guest_session_id=nothing, session_id=nothing, movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_tv_episode_add_rating_DefaultApi, "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating", ["sec0", ], movie_add_rating_request)
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "episode_number", episode_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "guest_session_id", guest_session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Content-Type", content_type)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Add Rating

Rate a TV episode and save it to your rated list.

Params:
- series_id::Int64 (required)
- content_type::String (required)
- season_number::Int64 (required)
- episode_number::Int64 (required)
- guest_session_id::String
- session_id::String
- movie_add_rating_request::MovieAddRatingRequest

Return: MovieAddRating200Response, OpenAPI.Clients.ApiResponse
"""
function tv_episode_add_rating(_api::DefaultApi, series_id::Int64, content_type::String, season_number::Int64, episode_number::Int64; guest_session_id=nothing, session_id=nothing, movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_add_rating(_api, series_id, content_type, season_number, episode_number; guest_session_id=guest_session_id, session_id=session_id, movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_episode_add_rating(_api::DefaultApi, response_stream::Channel, series_id::Int64, content_type::String, season_number::Int64, episode_number::Int64; guest_session_id=nothing, session_id=nothing, movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_add_rating(_api, series_id, content_type, season_number, episode_number; guest_session_id=guest_session_id, session_id=session_id, movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_episode_changes_by_id_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvEpisodeChangesById200Response,
)

function _oacinternal_tv_episode_changes_by_id(_api::DefaultApi, episode_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_episode_changes_by_id_DefaultApi, "/3/tv/episode/{episode_id}/changes", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "episode_id", episode_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Changes

Get the recent changes for a TV episode.

Params:
- episode_id::Int64 (required)

Return: TvEpisodeChangesById200Response, OpenAPI.Clients.ApiResponse
"""
function tv_episode_changes_by_id(_api::DefaultApi, episode_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_changes_by_id(_api, episode_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_episode_changes_by_id(_api::DefaultApi, response_stream::Channel, episode_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_changes_by_id(_api, episode_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_episode_credits_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvEpisodeCredits200Response,
)

function _oacinternal_tv_episode_credits(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::Int64; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_episode_credits_DefaultApi, "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/credits", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "episode_number", episode_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Credits



Params:
- series_id::Int64 (required)
- season_number::Int64 (required)
- episode_number::Int64 (required)
- language::String

Return: TvEpisodeCredits200Response, OpenAPI.Clients.ApiResponse
"""
function tv_episode_credits(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_credits(_api, series_id, season_number, episode_number; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_episode_credits(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64, episode_number::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_credits(_api, series_id, season_number, episode_number; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_episode_delete_rating_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieDeleteRating200Response,
)

function _oacinternal_tv_episode_delete_rating(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::Int64; content_type=nothing, guest_session_id=nothing, session_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_tv_episode_delete_rating_DefaultApi, "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "episode_number", episode_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "guest_session_id", guest_session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Content-Type", content_type)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Rating

Delete your rating on a TV episode.

Params:
- series_id::Int64 (required)
- season_number::Int64 (required)
- episode_number::Int64 (required)
- content_type::String
- guest_session_id::String
- session_id::String

Return: MovieDeleteRating200Response, OpenAPI.Clients.ApiResponse
"""
function tv_episode_delete_rating(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::Int64; content_type=nothing, guest_session_id=nothing, session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_delete_rating(_api, series_id, season_number, episode_number; content_type=content_type, guest_session_id=guest_session_id, session_id=session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_episode_delete_rating(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64, episode_number::Int64; content_type=nothing, guest_session_id=nothing, session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_delete_rating(_api, series_id, season_number, episode_number; content_type=content_type, guest_session_id=guest_session_id, session_id=session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_episode_details_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvEpisodeDetails200Response,
)

function _oacinternal_tv_episode_details(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::Int64; append_to_response=nothing, language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_episode_details_DefaultApi, "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "episode_number", episode_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "append_to_response", append_to_response)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Details

Query the details of a TV episode.

Params:
- series_id::Int64 (required)
- season_number::Int64 (required)
- episode_number::Int64 (required)
- append_to_response::String
- language::String

Return: TvEpisodeDetails200Response, OpenAPI.Clients.ApiResponse
"""
function tv_episode_details(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::Int64; append_to_response=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_details(_api, series_id, season_number, episode_number; append_to_response=append_to_response, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_episode_details(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64, episode_number::Int64; append_to_response=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_details(_api, series_id, season_number, episode_number; append_to_response=append_to_response, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_episode_external_ids_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvEpisodeExternalIds200Response,
)

function _oacinternal_tv_episode_external_ids(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_episode_external_ids_DefaultApi, "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/external_ids", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "episode_number", episode_number)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""External IDs

Get a list of external IDs that have been added to a TV episode.

Params:
- series_id::Int64 (required)
- season_number::Int64 (required)
- episode_number::String (required)

Return: TvEpisodeExternalIds200Response, OpenAPI.Clients.ApiResponse
"""
function tv_episode_external_ids(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::String; _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_external_ids(_api, series_id, season_number, episode_number; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_episode_external_ids(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64, episode_number::String; _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_external_ids(_api, series_id, season_number, episode_number; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_episode_group_details_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvEpisodeGroupDetails200Response,
)

function _oacinternal_tv_episode_group_details(_api::DefaultApi, tv_episode_group_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_episode_group_details_DefaultApi, "/3/tv/episode_group/{tv_episode_group_id}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "tv_episode_group_id", tv_episode_group_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Details

Get the details of a TV episode group.

Params:
- tv_episode_group_id::String (required)

Return: TvEpisodeGroupDetails200Response, OpenAPI.Clients.ApiResponse
"""
function tv_episode_group_details(_api::DefaultApi, tv_episode_group_id::String; _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_group_details(_api, tv_episode_group_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_episode_group_details(_api::DefaultApi, response_stream::Channel, tv_episode_group_id::String; _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_group_details(_api, tv_episode_group_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_episode_images_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvEpisodeImages200Response,
)

function _oacinternal_tv_episode_images(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::Int64; include_image_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_episode_images_DefaultApi, "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/images", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "episode_number", episode_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "include_image_language", include_image_language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Images

Get the images that belong to a TV episode.

Params:
- series_id::Int64 (required)
- season_number::Int64 (required)
- episode_number::Int64 (required)
- include_image_language::String
- language::String

Return: TvEpisodeImages200Response, OpenAPI.Clients.ApiResponse
"""
function tv_episode_images(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::Int64; include_image_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_images(_api, series_id, season_number, episode_number; include_image_language=include_image_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_episode_images(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64, episode_number::Int64; include_image_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_images(_api, series_id, season_number, episode_number; include_image_language=include_image_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_episode_translations_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvEpisodeTranslations200Response,
)

function _oacinternal_tv_episode_translations(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_episode_translations_DefaultApi, "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/translations", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "episode_number", episode_number)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Translations

Get the translations that have been added to a TV episode.

Params:
- series_id::Int64 (required)
- season_number::Int64 (required)
- episode_number::Int64 (required)

Return: TvEpisodeTranslations200Response, OpenAPI.Clients.ApiResponse
"""
function tv_episode_translations(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_translations(_api, series_id, season_number, episode_number; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_episode_translations(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64, episode_number::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_translations(_api, series_id, season_number, episode_number; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_episode_videos_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeasonVideos200Response,
)

function _oacinternal_tv_episode_videos(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::Int64; include_video_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_episode_videos_DefaultApi, "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/videos", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "episode_number", episode_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "include_video_language", include_video_language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Videos

Get the videos that belong to a TV episode.

Params:
- series_id::Int64 (required)
- season_number::Int64 (required)
- episode_number::Int64 (required)
- include_video_language::String
- language::String

Return: TvSeasonVideos200Response, OpenAPI.Clients.ApiResponse
"""
function tv_episode_videos(_api::DefaultApi, series_id::Int64, season_number::Int64, episode_number::Int64; include_video_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_videos(_api, series_id, season_number, episode_number; include_video_language=include_video_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_episode_videos(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64, episode_number::Int64; include_video_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_episode_videos(_api, series_id, season_number, episode_number; include_video_language=include_video_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_season_account_states_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeasonAccountStates200Response,
)

function _oacinternal_tv_season_account_states(_api::DefaultApi, series_id::Int64, season_number::Int64; session_id=nothing, guest_session_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_season_account_states_DefaultApi, "/3/tv/{series_id}/season/{season_number}/account_states", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "guest_session_id", guest_session_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Account States

Get the rating, watchlist and favourite status.

Params:
- series_id::Int64 (required)
- season_number::Int64 (required)
- session_id::String
- guest_session_id::String

Return: TvSeasonAccountStates200Response, OpenAPI.Clients.ApiResponse
"""
function tv_season_account_states(_api::DefaultApi, series_id::Int64, season_number::Int64; session_id=nothing, guest_session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_account_states(_api, series_id, season_number; session_id=session_id, guest_session_id=guest_session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_season_account_states(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64; session_id=nothing, guest_session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_account_states(_api, series_id, season_number; session_id=session_id, guest_session_id=guest_session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_season_aggregate_credits_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeasonAggregateCredits200Response,
)

function _oacinternal_tv_season_aggregate_credits(_api::DefaultApi, series_id::Int64, season_number::Int64; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_season_aggregate_credits_DefaultApi, "/3/tv/{series_id}/season/{season_number}/aggregate_credits", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Aggregate Credits

Get the aggregate credits (cast and crew) that have been added to a TV season.

Params:
- series_id::Int64 (required)
- season_number::Int64 (required)
- language::String

Return: TvSeasonAggregateCredits200Response, OpenAPI.Clients.ApiResponse
"""
function tv_season_aggregate_credits(_api::DefaultApi, series_id::Int64, season_number::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_aggregate_credits(_api, series_id, season_number; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_season_aggregate_credits(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_aggregate_credits(_api, series_id, season_number; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_season_changes_by_id_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeasonChangesById200Response,
)

function _oacinternal_tv_season_changes_by_id(_api::DefaultApi, season_id::Int64; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_season_changes_by_id_DefaultApi, "/3/tv/season/{season_id}/changes", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "season_id", season_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "end_date", end_date)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "start_date", start_date)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Changes

Get the recent changes for a TV season.

Params:
- season_id::Int64 (required)
- end_date::String
- page::Int64
- start_date::String

Return: TvSeasonChangesById200Response, OpenAPI.Clients.ApiResponse
"""
function tv_season_changes_by_id(_api::DefaultApi, season_id::Int64; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_changes_by_id(_api, season_id; end_date=end_date, page=page, start_date=start_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_season_changes_by_id(_api::DefaultApi, response_stream::Channel, season_id::Int64; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_changes_by_id(_api, season_id; end_date=end_date, page=page, start_date=start_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_season_credits_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeasonCredits200Response,
)

function _oacinternal_tv_season_credits(_api::DefaultApi, series_id::Int64, season_number::Int64; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_season_credits_DefaultApi, "/3/tv/{series_id}/season/{season_number}/credits", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Credits



Params:
- series_id::Int64 (required)
- season_number::Int64 (required)
- language::String

Return: TvSeasonCredits200Response, OpenAPI.Clients.ApiResponse
"""
function tv_season_credits(_api::DefaultApi, series_id::Int64, season_number::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_credits(_api, series_id, season_number; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_season_credits(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_credits(_api, series_id, season_number; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_season_details_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeasonDetails200Response,
)

function _oacinternal_tv_season_details(_api::DefaultApi, series_id::Int64, season_number::Int64; append_to_response=nothing, language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_season_details_DefaultApi, "/3/tv/{series_id}/season/{season_number}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "append_to_response", append_to_response)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Details

Query the details of a TV season.

Params:
- series_id::Int64 (required)
- season_number::Int64 (required)
- append_to_response::String
- language::String

Return: TvSeasonDetails200Response, OpenAPI.Clients.ApiResponse
"""
function tv_season_details(_api::DefaultApi, series_id::Int64, season_number::Int64; append_to_response=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_details(_api, series_id, season_number; append_to_response=append_to_response, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_season_details(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64; append_to_response=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_details(_api, series_id, season_number; append_to_response=append_to_response, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_season_external_ids_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeasonExternalIds200Response,
)

function _oacinternal_tv_season_external_ids(_api::DefaultApi, series_id::Int64, season_number::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_season_external_ids_DefaultApi, "/3/tv/{series_id}/season/{season_number}/external_ids", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""External IDs

Get a list of external IDs that have been added to a TV season.

Params:
- series_id::Int64 (required)
- season_number::Int64 (required)

Return: TvSeasonExternalIds200Response, OpenAPI.Clients.ApiResponse
"""
function tv_season_external_ids(_api::DefaultApi, series_id::Int64, season_number::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_season_external_ids(_api, series_id, season_number; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_season_external_ids(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_season_external_ids(_api, series_id, season_number; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_season_images_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeasonImages200Response,
)

function _oacinternal_tv_season_images(_api::DefaultApi, series_id::Int64, season_number::Int64; include_image_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_season_images_DefaultApi, "/3/tv/{series_id}/season/{season_number}/images", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "include_image_language", include_image_language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Images

Get the images that belong to a TV season.

Params:
- series_id::Int64 (required)
- season_number::Int64 (required)
- include_image_language::String
- language::String

Return: TvSeasonImages200Response, OpenAPI.Clients.ApiResponse
"""
function tv_season_images(_api::DefaultApi, series_id::Int64, season_number::Int64; include_image_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_images(_api, series_id, season_number; include_image_language=include_image_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_season_images(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64; include_image_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_images(_api, series_id, season_number; include_image_language=include_image_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_season_translations_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeasonTranslations200Response,
)

function _oacinternal_tv_season_translations(_api::DefaultApi, series_id::Int64, season_number::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_season_translations_DefaultApi, "/3/tv/{series_id}/season/{season_number}/translations", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Translations

Get the translations for a TV season.

Params:
- series_id::Int64 (required)
- season_number::Int64 (required)

Return: TvSeasonTranslations200Response, OpenAPI.Clients.ApiResponse
"""
function tv_season_translations(_api::DefaultApi, series_id::Int64, season_number::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_season_translations(_api, series_id, season_number; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_season_translations(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_season_translations(_api, series_id, season_number; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_season_videos_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeasonVideos200Response,
)

function _oacinternal_tv_season_videos(_api::DefaultApi, series_id::Int64, season_number::Int64; include_video_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_season_videos_DefaultApi, "/3/tv/{series_id}/season/{season_number}/videos", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "include_video_language", include_video_language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Videos

Get the videos that belong to a TV season.

Params:
- series_id::Int64 (required)
- season_number::Int64 (required)
- include_video_language::String
- language::String

Return: TvSeasonVideos200Response, OpenAPI.Clients.ApiResponse
"""
function tv_season_videos(_api::DefaultApi, series_id::Int64, season_number::Int64; include_video_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_videos(_api, series_id, season_number; include_video_language=include_video_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_season_videos(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64; include_video_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_videos(_api, series_id, season_number; include_video_language=include_video_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_season_watch_providers_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeasonWatchProviders200Response,
)

function _oacinternal_tv_season_watch_providers(_api::DefaultApi, series_id::Int64, season_number::Int64; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_season_watch_providers_DefaultApi, "/3/tv/{series_id}/season/{season_number}/watch/providers", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.path, "season_number", season_number)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Watch Providers

Get the list of streaming providers we have for a TV season.

Params:
- series_id::Int64 (required)
- season_number::Int64 (required)
- language::String

Return: TvSeasonWatchProviders200Response, OpenAPI.Clients.ApiResponse
"""
function tv_season_watch_providers(_api::DefaultApi, series_id::Int64, season_number::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_watch_providers(_api, series_id, season_number; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_season_watch_providers(_api::DefaultApi, response_stream::Channel, series_id::Int64, season_number::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_season_watch_providers(_api, series_id, season_number; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_account_states_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieAccountStates200Response,
)

function _oacinternal_tv_series_account_states(_api::DefaultApi, series_id::Int64; session_id=nothing, guest_session_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_account_states_DefaultApi, "/3/tv/{series_id}/account_states", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "guest_session_id", guest_session_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Account States

Get the rating, watchlist and favourite status.

Params:
- series_id::Int64 (required)
- session_id::String
- guest_session_id::String

Return: MovieAccountStates200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_account_states(_api::DefaultApi, series_id::Int64; session_id=nothing, guest_session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_account_states(_api, series_id; session_id=session_id, guest_session_id=guest_session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_account_states(_api::DefaultApi, response_stream::Channel, series_id::Int64; session_id=nothing, guest_session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_account_states(_api, series_id; session_id=session_id, guest_session_id=guest_session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_add_rating_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieAddRating200Response,
)

function _oacinternal_tv_series_add_rating(_api::DefaultApi, series_id::Int64, content_type::String; guest_session_id=nothing, session_id=nothing, movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_tv_series_add_rating_DefaultApi, "/3/tv/{series_id}/rating", ["sec0", ], movie_add_rating_request)
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "guest_session_id", guest_session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Content-Type", content_type)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Add Rating

Rate a TV show and save it to your rated list.

Params:
- series_id::Int64 (required)
- content_type::String (required)
- guest_session_id::String
- session_id::String
- movie_add_rating_request::MovieAddRatingRequest

Return: MovieAddRating200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_add_rating(_api::DefaultApi, series_id::Int64, content_type::String; guest_session_id=nothing, session_id=nothing, movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_add_rating(_api, series_id, content_type; guest_session_id=guest_session_id, session_id=session_id, movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_add_rating(_api::DefaultApi, response_stream::Channel, series_id::Int64, content_type::String; guest_session_id=nothing, session_id=nothing, movie_add_rating_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_add_rating(_api, series_id, content_type; guest_session_id=guest_session_id, session_id=session_id, movie_add_rating_request=movie_add_rating_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_aggregate_credits_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesAggregateCredits200Response,
)

function _oacinternal_tv_series_aggregate_credits(_api::DefaultApi, series_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_aggregate_credits_DefaultApi, "/3/tv/{series_id}/aggregate_credits", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Aggregate Credits

Get the aggregate credits (cast and crew) that have been added to a TV show.

Params:
- series_id::Int64 (required)
- language::String

Return: TvSeriesAggregateCredits200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_aggregate_credits(_api::DefaultApi, series_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_aggregate_credits(_api, series_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_aggregate_credits(_api::DefaultApi, response_stream::Channel, series_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_aggregate_credits(_api, series_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_airing_today_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesAiringTodayList200Response,
)

function _oacinternal_tv_series_airing_today_list(_api::DefaultApi; language=nothing, page=nothing, timezone=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_airing_today_list_DefaultApi, "/3/tv/airing_today", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "timezone", timezone)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Airing Today

Get a list of TV shows airing today.

Params:
- language::String
- page::Int64
- timezone::String

Return: TvSeriesAiringTodayList200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_airing_today_list(_api::DefaultApi; language=nothing, page=nothing, timezone=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_airing_today_list(_api; language=language, page=page, timezone=timezone, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_airing_today_list(_api::DefaultApi, response_stream::Channel; language=nothing, page=nothing, timezone=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_airing_today_list(_api; language=language, page=page, timezone=timezone, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_alternative_titles_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesAlternativeTitles200Response,
)

function _oacinternal_tv_series_alternative_titles(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_alternative_titles_DefaultApi, "/3/tv/{series_id}/alternative_titles", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Alternative Titles

Get the alternative titles that have been added to a TV show.

Params:
- series_id::Int64 (required)

Return: TvSeriesAlternativeTitles200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_alternative_titles(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_alternative_titles(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_alternative_titles(_api::DefaultApi, response_stream::Channel, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_alternative_titles(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_changes_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesChanges200Response,
)

function _oacinternal_tv_series_changes(_api::DefaultApi, series_id::Int64; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_changes_DefaultApi, "/3/tv/{series_id}/changes", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "end_date", end_date)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "start_date", start_date)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Changes

Get the recent changes for a TV show.

Params:
- series_id::Int64 (required)
- end_date::String
- page::Int64
- start_date::String

Return: TvSeriesChanges200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_changes(_api::DefaultApi, series_id::Int64; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_changes(_api, series_id; end_date=end_date, page=page, start_date=start_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_changes(_api::DefaultApi, response_stream::Channel, series_id::Int64; end_date=nothing, page=nothing, start_date=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_changes(_api, series_id; end_date=end_date, page=page, start_date=start_date, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_content_ratings_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesContentRatings200Response,
)

function _oacinternal_tv_series_content_ratings(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_content_ratings_DefaultApi, "/3/tv/{series_id}/content_ratings", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Content Ratings

Get the content ratings that have been added to a TV show.

Params:
- series_id::Int64 (required)

Return: TvSeriesContentRatings200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_content_ratings(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_content_ratings(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_content_ratings(_api::DefaultApi, response_stream::Channel, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_content_ratings(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_credits_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesCredits200Response,
)

function _oacinternal_tv_series_credits(_api::DefaultApi, series_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_credits_DefaultApi, "/3/tv/{series_id}/credits", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Credits

Get the latest season credits of a TV show.

Params:
- series_id::Int64 (required)
- language::String

Return: TvSeriesCredits200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_credits(_api::DefaultApi, series_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_credits(_api, series_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_credits(_api::DefaultApi, response_stream::Channel, series_id::Int64; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_credits(_api, series_id; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_delete_rating_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieDeleteRating200Response,
)

function _oacinternal_tv_series_delete_rating(_api::DefaultApi, series_id::Int64; content_type=nothing, guest_session_id=nothing, session_id=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_tv_series_delete_rating_DefaultApi, "/3/tv/{series_id}/rating", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "guest_session_id", guest_session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "session_id", session_id)  # type String
    OpenAPI.Clients.set_param(_ctx.header, "Content-Type", content_type)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete Rating



Params:
- series_id::Int64 (required)
- content_type::String
- guest_session_id::String
- session_id::String

Return: MovieDeleteRating200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_delete_rating(_api::DefaultApi, series_id::Int64; content_type=nothing, guest_session_id=nothing, session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_delete_rating(_api, series_id; content_type=content_type, guest_session_id=guest_session_id, session_id=session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_delete_rating(_api::DefaultApi, response_stream::Channel, series_id::Int64; content_type=nothing, guest_session_id=nothing, session_id=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_delete_rating(_api, series_id; content_type=content_type, guest_session_id=guest_session_id, session_id=session_id, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_details_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesDetails200Response,
)

function _oacinternal_tv_series_details(_api::DefaultApi, series_id::Int64; append_to_response=nothing, language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_details_DefaultApi, "/3/tv/{series_id}", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "append_to_response", append_to_response)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Details

Get the details of a TV show.

Params:
- series_id::Int64 (required)
- append_to_response::String
- language::String

Return: TvSeriesDetails200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_details(_api::DefaultApi, series_id::Int64; append_to_response=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_details(_api, series_id; append_to_response=append_to_response, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_details(_api::DefaultApi, response_stream::Channel, series_id::Int64; append_to_response=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_details(_api, series_id; append_to_response=append_to_response, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_episode_groups_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesEpisodeGroups200Response,
)

function _oacinternal_tv_series_episode_groups(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_episode_groups_DefaultApi, "/3/tv/{series_id}/episode_groups", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Episode Groups

Get the episode groups that have been added to a TV show.

Params:
- series_id::Int64 (required)

Return: TvSeriesEpisodeGroups200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_episode_groups(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_episode_groups(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_episode_groups(_api::DefaultApi, response_stream::Channel, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_episode_groups(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_external_ids_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesExternalIds200Response,
)

function _oacinternal_tv_series_external_ids(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_external_ids_DefaultApi, "/3/tv/{series_id}/external_ids", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""External IDs

Get a list of external IDs that have been added to a TV show.

Params:
- series_id::Int64 (required)

Return: TvSeriesExternalIds200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_external_ids(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_external_ids(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_external_ids(_api::DefaultApi, response_stream::Channel, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_external_ids(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_images_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MovieImages200Response,
)

function _oacinternal_tv_series_images(_api::DefaultApi, series_id::Int64; include_image_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_images_DefaultApi, "/3/tv/{series_id}/images", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "include_image_language", include_image_language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Images

Get the images that belong to a TV series.

Params:
- series_id::Int64 (required)
- include_image_language::String
- language::String

Return: MovieImages200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_images(_api::DefaultApi, series_id::Int64; include_image_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_images(_api, series_id; include_image_language=include_image_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_images(_api::DefaultApi, response_stream::Channel, series_id::Int64; include_image_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_images(_api, series_id; include_image_language=include_image_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_keywords_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesKeywords200Response,
)

function _oacinternal_tv_series_keywords(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_keywords_DefaultApi, "/3/tv/{series_id}/keywords", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Keywords

Get a list of keywords that have been added to a TV show.

Params:
- series_id::Int64 (required)

Return: TvSeriesKeywords200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_keywords(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_keywords(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_keywords(_api::DefaultApi, response_stream::Channel, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_keywords(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_latest_id_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesLatestId200Response,
)

function _oacinternal_tv_series_latest_id(_api::DefaultApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_latest_id_DefaultApi, "/3/tv/latest", ["sec0", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Latest

Get the newest TV show ID.

Params:

Return: TvSeriesLatestId200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_latest_id(_api::DefaultApi; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_latest_id(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_latest_id(_api::DefaultApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_latest_id(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_on_the_air_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesOnTheAirList200Response,
)

function _oacinternal_tv_series_on_the_air_list(_api::DefaultApi; language=nothing, page=nothing, timezone=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_on_the_air_list_DefaultApi, "/3/tv/on_the_air", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "timezone", timezone)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""On The Air

Get a list of TV shows that air in the next 7 days.

Params:
- language::String
- page::Int64
- timezone::String

Return: TvSeriesOnTheAirList200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_on_the_air_list(_api::DefaultApi; language=nothing, page=nothing, timezone=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_on_the_air_list(_api; language=language, page=page, timezone=timezone, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_on_the_air_list(_api::DefaultApi, response_stream::Channel; language=nothing, page=nothing, timezone=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_on_the_air_list(_api; language=language, page=page, timezone=timezone, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_popular_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesPopularList200Response,
)

function _oacinternal_tv_series_popular_list(_api::DefaultApi; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_popular_list_DefaultApi, "/3/tv/popular", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Popular

Get a list of TV shows ordered by popularity.

Params:
- language::String
- page::Int64

Return: TvSeriesPopularList200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_popular_list(_api::DefaultApi; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_popular_list(_api; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_popular_list(_api::DefaultApi, response_stream::Channel; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_popular_list(_api; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_recommendations_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesRecommendations200Response,
)

function _oacinternal_tv_series_recommendations(_api::DefaultApi, series_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_recommendations_DefaultApi, "/3/tv/{series_id}/recommendations", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Recommendations



Params:
- series_id::Int64 (required)
- language::String
- page::Int64

Return: TvSeriesRecommendations200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_recommendations(_api::DefaultApi, series_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_recommendations(_api, series_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_recommendations(_api::DefaultApi, response_stream::Channel, series_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_recommendations(_api, series_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_reviews_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesReviews200Response,
)

function _oacinternal_tv_series_reviews(_api::DefaultApi, series_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_reviews_DefaultApi, "/3/tv/{series_id}/reviews", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Reviews

Get the reviews that have been added to a TV show.

Params:
- series_id::Int64 (required)
- language::String
- page::Int64

Return: TvSeriesReviews200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_reviews(_api::DefaultApi, series_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_reviews(_api, series_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_reviews(_api::DefaultApi, response_stream::Channel, series_id::Int64; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_reviews(_api, series_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_screened_theatrically_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesScreenedTheatrically200Response,
)

function _oacinternal_tv_series_screened_theatrically(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_screened_theatrically_DefaultApi, "/3/tv/{series_id}/screened_theatrically", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Screened Theatrically

Get the seasons and episodes that have screened theatrically.

Params:
- series_id::Int64 (required)

Return: TvSeriesScreenedTheatrically200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_screened_theatrically(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_screened_theatrically(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_screened_theatrically(_api::DefaultApi, response_stream::Channel, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_screened_theatrically(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_similar_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesSimilar200Response,
)

function _oacinternal_tv_series_similar(_api::DefaultApi, series_id::String; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_similar_DefaultApi, "/3/tv/{series_id}/similar", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Similar

Get the similar TV shows.

Params:
- series_id::String (required)
- language::String
- page::Int64

Return: TvSeriesSimilar200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_similar(_api::DefaultApi, series_id::String; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_similar(_api, series_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_similar(_api::DefaultApi, response_stream::Channel, series_id::String; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_similar(_api, series_id; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_top_rated_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesTopRatedList200Response,
)

function _oacinternal_tv_series_top_rated_list(_api::DefaultApi; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_top_rated_list_DefaultApi, "/3/tv/top_rated", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "page", page)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Top Rated

Get a list of TV shows ordered by rating.

Params:
- language::String
- page::Int64

Return: TvSeriesTopRatedList200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_top_rated_list(_api::DefaultApi; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_top_rated_list(_api; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_top_rated_list(_api::DefaultApi, response_stream::Channel; language=nothing, page=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_top_rated_list(_api; language=language, page=page, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_translations_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesTranslations200Response,
)

function _oacinternal_tv_series_translations(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_translations_DefaultApi, "/3/tv/{series_id}/translations", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Translations

Get the translations that have been added to a TV show.

Params:
- series_id::Int64 (required)

Return: TvSeriesTranslations200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_translations(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_translations(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_translations(_api::DefaultApi, response_stream::Channel, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_translations(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_videos_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesVideos200Response,
)

function _oacinternal_tv_series_videos(_api::DefaultApi, series_id::Int64; include_video_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_videos_DefaultApi, "/3/tv/{series_id}/videos", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "include_video_language", include_video_language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Videos

Get the videos that belong to a TV show.

Params:
- series_id::Int64 (required)
- include_video_language::String
- language::String

Return: TvSeriesVideos200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_videos(_api::DefaultApi, series_id::Int64; include_video_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_videos(_api, series_id; include_video_language=include_video_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_videos(_api::DefaultApi, response_stream::Channel, series_id::Int64; include_video_language=nothing, language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_tv_series_videos(_api, series_id; include_video_language=include_video_language, language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tv_series_watch_providers_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TvSeriesWatchProviders200Response,
)

function _oacinternal_tv_series_watch_providers(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tv_series_watch_providers_DefaultApi, "/3/tv/{series_id}/watch/providers", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.path, "series_id", series_id)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Watch Providers

Get the list of streaming providers we have for a TV show.

Params:
- series_id::Int64 (required)

Return: TvSeriesWatchProviders200Response, OpenAPI.Clients.ApiResponse
"""
function tv_series_watch_providers(_api::DefaultApi, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_watch_providers(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tv_series_watch_providers(_api::DefaultApi, response_stream::Channel, series_id::Int64; _mediaType=nothing)
    _ctx = _oacinternal_tv_series_watch_providers(_api, series_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_provider_tv_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => WatchProvidersMovieList200Response,
)

function _oacinternal_watch_provider_tv_list(_api::DefaultApi; language=nothing, watch_region=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_provider_tv_list_DefaultApi, "/3/watch/providers/tv", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "watch_region", watch_region)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""TV Providers

Get the list of streaming providers we have for TV shows.

Params:
- language::String
- watch_region::String

Return: WatchProvidersMovieList200Response, OpenAPI.Clients.ApiResponse
"""
function watch_provider_tv_list(_api::DefaultApi; language=nothing, watch_region=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_provider_tv_list(_api; language=language, watch_region=watch_region, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_provider_tv_list(_api::DefaultApi, response_stream::Channel; language=nothing, watch_region=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_provider_tv_list(_api; language=language, watch_region=watch_region, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_providers_available_regions_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => WatchProvidersAvailableRegions200Response,
)

function _oacinternal_watch_providers_available_regions(_api::DefaultApi; language=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_providers_available_regions_DefaultApi, "/3/watch/providers/regions", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Available Regions

Get the list of the countries we have watch provider (OTT/streaming) data for.

Params:
- language::String

Return: WatchProvidersAvailableRegions200Response, OpenAPI.Clients.ApiResponse
"""
function watch_providers_available_regions(_api::DefaultApi; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_providers_available_regions(_api; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_providers_available_regions(_api::DefaultApi, response_stream::Channel; language=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_providers_available_regions(_api; language=language, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_watch_providers_movie_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => WatchProvidersMovieList200Response,
)

function _oacinternal_watch_providers_movie_list(_api::DefaultApi; language=nothing, watch_region=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_watch_providers_movie_list_DefaultApi, "/3/watch/providers/movie", ["sec0", ])
    OpenAPI.Clients.set_param(_ctx.query, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "watch_region", watch_region)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Movie Providers

Get the list of streaming providers we have for movies.

Params:
- language::String
- watch_region::String

Return: WatchProvidersMovieList200Response, OpenAPI.Clients.ApiResponse
"""
function watch_providers_movie_list(_api::DefaultApi; language=nothing, watch_region=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_providers_movie_list(_api; language=language, watch_region=watch_region, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function watch_providers_movie_list(_api::DefaultApi, response_stream::Channel; language=nothing, watch_region=nothing, _mediaType=nothing)
    _ctx = _oacinternal_watch_providers_movie_list(_api; language=language, watch_region=watch_region, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export account_add_favorite
export account_add_to_watchlist
export account_details
export account_favorite_tv
export account_get_favorites
export account_lists
export account_rated_movies
export account_rated_tv
export account_rated_tv_episodes
export account_watchlist_movies
export account_watchlist_tv
export alternative_names_copy
export authentication_create_guest_session
export authentication_create_request_token
export authentication_create_session
export authentication_create_session_from_login
export authentication_create_session_from_v4_token
export authentication_delete_session
export authentication_validate_key
export certification_movie_list
export certifications_tv_list
export changes_movie_list
export changes_people_list
export changes_tv_list
export collection_details
export collection_images
export collection_translations
export company_alternative_names
export company_details
export company_images
export configuration_countries
export configuration_details
export configuration_jobs
export configuration_languages
export configuration_primary_translations
export configuration_timezones
export credit_details
export details_copy
export discover_movie
export discover_tv
export find_by_id
export genre_movie_list
export genre_tv_list
export guest_session_rated_movies
export guest_session_rated_tv
export guest_session_rated_tv_episodes
export keyword_details
export keyword_movies
export list_add_movie
export list_check_item_status
export list_clear
export list_create
export list_delete
export list_details
export list_remove_movie
export lists_copy
export movie_account_states
export movie_add_rating
export movie_alternative_titles
export movie_changes
export movie_credits
export movie_delete_rating
export movie_details
export movie_external_ids
export movie_images
export movie_keywords
export movie_latest_id
export movie_lists
export movie_now_playing_list
export movie_popular_list
export movie_recommendations
export movie_release_dates
export movie_reviews
export movie_similar
export movie_top_rated_list
export movie_translations
export movie_upcoming_list
export movie_videos
export movie_watch_providers
export network_details
export person_changes
export person_combined_credits
export person_details
export person_external_ids
export person_images
export person_latest_id
export person_movie_credits
export person_popular_list
export person_tagged_images
export person_tv_credits
export review_details
export search_collection
export search_company
export search_keyword
export search_movie
export search_multi
export search_person
export search_tv
export translations
export trending_all
export trending_movies
export trending_people
export trending_tv
export tv_episode_account_states
export tv_episode_add_rating
export tv_episode_changes_by_id
export tv_episode_credits
export tv_episode_delete_rating
export tv_episode_details
export tv_episode_external_ids
export tv_episode_group_details
export tv_episode_images
export tv_episode_translations
export tv_episode_videos
export tv_season_account_states
export tv_season_aggregate_credits
export tv_season_changes_by_id
export tv_season_credits
export tv_season_details
export tv_season_external_ids
export tv_season_images
export tv_season_translations
export tv_season_videos
export tv_season_watch_providers
export tv_series_account_states
export tv_series_add_rating
export tv_series_aggregate_credits
export tv_series_airing_today_list
export tv_series_alternative_titles
export tv_series_changes
export tv_series_content_ratings
export tv_series_credits
export tv_series_delete_rating
export tv_series_details
export tv_series_episode_groups
export tv_series_external_ids
export tv_series_images
export tv_series_keywords
export tv_series_latest_id
export tv_series_on_the_air_list
export tv_series_popular_list
export tv_series_recommendations
export tv_series_reviews
export tv_series_screened_theatrically
export tv_series_similar
export tv_series_top_rated_list
export tv_series_translations
export tv_series_videos
export tv_series_watch_providers
export watch_provider_tv_list
export watch_providers_available_regions
export watch_providers_movie_list
