# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""collection_images_200_response

    CollectionImages200Response(;
        id=0,
        backdrops=nothing,
        posters=nothing,
    )

    - id::Int64
    - backdrops::Vector{CollectionImages200ResponseBackdropsInner}
    - posters::Vector{CollectionImages200ResponsePostersInner}
"""
Base.@kwdef mutable struct CollectionImages200Response <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = 0
    backdrops::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CollectionImages200ResponseBackdropsInner} }
    posters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CollectionImages200ResponsePostersInner} }

    function CollectionImages200Response(id, backdrops, posters, )
        OpenAPI.validate_property(CollectionImages200Response, Symbol("id"), id)
        OpenAPI.validate_property(CollectionImages200Response, Symbol("backdrops"), backdrops)
        OpenAPI.validate_property(CollectionImages200Response, Symbol("posters"), posters)
        return new(id, backdrops, posters, )
    end
end # type CollectionImages200Response

const _property_types_CollectionImages200Response = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("backdrops")=>"Vector{CollectionImages200ResponseBackdropsInner}", Symbol("posters")=>"Vector{CollectionImages200ResponsePostersInner}", )
OpenAPI.property_type(::Type{ CollectionImages200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CollectionImages200Response[name]))}

function check_required(o::CollectionImages200Response)
    true
end

function OpenAPI.validate_property(::Type{ CollectionImages200Response }, name::Symbol, val)
end
