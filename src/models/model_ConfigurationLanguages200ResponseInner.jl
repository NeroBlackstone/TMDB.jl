# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""configuration_languages_200_response_inner

    ConfigurationLanguages200ResponseInner(;
        iso_639_1=nothing,
        english_name=nothing,
        name=nothing,
    )

    - iso_639_1::String
    - english_name::String
    - name::String
"""
Base.@kwdef mutable struct ConfigurationLanguages200ResponseInner <: OpenAPI.APIModel
    iso_639_1::Union{Nothing, String} = nothing
    english_name::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing

    function ConfigurationLanguages200ResponseInner(iso_639_1, english_name, name, )
        OpenAPI.validate_property(ConfigurationLanguages200ResponseInner, Symbol("iso_639_1"), iso_639_1)
        OpenAPI.validate_property(ConfigurationLanguages200ResponseInner, Symbol("english_name"), english_name)
        OpenAPI.validate_property(ConfigurationLanguages200ResponseInner, Symbol("name"), name)
        return new(iso_639_1, english_name, name, )
    end
end # type ConfigurationLanguages200ResponseInner

const _property_types_ConfigurationLanguages200ResponseInner = Dict{Symbol,String}(Symbol("iso_639_1")=>"String", Symbol("english_name")=>"String", Symbol("name")=>"String", )
OpenAPI.property_type(::Type{ ConfigurationLanguages200ResponseInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConfigurationLanguages200ResponseInner[name]))}

function check_required(o::ConfigurationLanguages200ResponseInner)
    true
end

function OpenAPI.validate_property(::Type{ ConfigurationLanguages200ResponseInner }, name::Symbol, val)
end
