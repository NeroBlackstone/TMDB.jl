# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""list_add_items_200_response

    ListAddItems200Response(;
        status_message=nothing,
        results=nothing,
        success=true,
        status_code=0,
    )

    - status_message::String
    - results::Vector{ListAddItems200ResponseResultsInner}
    - success::Bool
    - status_code::Int64
"""
Base.@kwdef mutable struct ListAddItems200Response <: OpenAPI.APIModel
    status_message::Union{Nothing, String} = nothing
    results::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ListAddItems200ResponseResultsInner} }
    success::Union{Nothing, Bool} = true
    status_code::Union{Nothing, Int64} = 0

    function ListAddItems200Response(status_message, results, success, status_code, )
        OpenAPI.validate_property(ListAddItems200Response, Symbol("status_message"), status_message)
        OpenAPI.validate_property(ListAddItems200Response, Symbol("results"), results)
        OpenAPI.validate_property(ListAddItems200Response, Symbol("success"), success)
        OpenAPI.validate_property(ListAddItems200Response, Symbol("status_code"), status_code)
        return new(status_message, results, success, status_code, )
    end
end # type ListAddItems200Response

const _property_types_ListAddItems200Response = Dict{Symbol,String}(Symbol("status_message")=>"String", Symbol("results")=>"Vector{ListAddItems200ResponseResultsInner}", Symbol("success")=>"Bool", Symbol("status_code")=>"Int64", )
OpenAPI.property_type(::Type{ ListAddItems200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ListAddItems200Response[name]))}

function check_required(o::ListAddItems200Response)
    true
end

function OpenAPI.validate_property(::Type{ ListAddItems200Response }, name::Symbol, val)
end
