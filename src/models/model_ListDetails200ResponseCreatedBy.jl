# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""list_details_200_response_created_by

    ListDetails200ResponseCreatedBy(;
        avatar_path=nothing,
        gravatar_hash=nothing,
        id=nothing,
        name=nothing,
        username=nothing,
    )

    - avatar_path::String
    - gravatar_hash::String
    - id::String
    - name::String
    - username::String
"""
Base.@kwdef mutable struct ListDetails200ResponseCreatedBy <: OpenAPI.APIModel
    avatar_path::Union{Nothing, String} = nothing
    gravatar_hash::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    username::Union{Nothing, String} = nothing

    function ListDetails200ResponseCreatedBy(avatar_path, gravatar_hash, id, name, username, )
        OpenAPI.validate_property(ListDetails200ResponseCreatedBy, Symbol("avatar_path"), avatar_path)
        OpenAPI.validate_property(ListDetails200ResponseCreatedBy, Symbol("gravatar_hash"), gravatar_hash)
        OpenAPI.validate_property(ListDetails200ResponseCreatedBy, Symbol("id"), id)
        OpenAPI.validate_property(ListDetails200ResponseCreatedBy, Symbol("name"), name)
        OpenAPI.validate_property(ListDetails200ResponseCreatedBy, Symbol("username"), username)
        return new(avatar_path, gravatar_hash, id, name, username, )
    end
end # type ListDetails200ResponseCreatedBy

const _property_types_ListDetails200ResponseCreatedBy = Dict{Symbol,String}(Symbol("avatar_path")=>"String", Symbol("gravatar_hash")=>"String", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("username")=>"String", )
OpenAPI.property_type(::Type{ ListDetails200ResponseCreatedBy }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ListDetails200ResponseCreatedBy[name]))}

function check_required(o::ListDetails200ResponseCreatedBy)
    true
end

function OpenAPI.validate_property(::Type{ ListDetails200ResponseCreatedBy }, name::Symbol, val)
end
