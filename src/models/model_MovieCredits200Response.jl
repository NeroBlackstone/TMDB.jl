# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""movie_credits_200_response

    MovieCredits200Response(;
        id=0,
        cast=nothing,
        crew=nothing,
    )

    - id::Int64
    - cast::Vector{MovieCredits200ResponseCastInner}
    - crew::Vector{MovieCredits200ResponseCrewInner}
"""
Base.@kwdef mutable struct MovieCredits200Response <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = 0
    cast::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{MovieCredits200ResponseCastInner} }
    crew::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{MovieCredits200ResponseCrewInner} }

    function MovieCredits200Response(id, cast, crew, )
        OpenAPI.validate_property(MovieCredits200Response, Symbol("id"), id)
        OpenAPI.validate_property(MovieCredits200Response, Symbol("cast"), cast)
        OpenAPI.validate_property(MovieCredits200Response, Symbol("crew"), crew)
        return new(id, cast, crew, )
    end
end # type MovieCredits200Response

const _property_types_MovieCredits200Response = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("cast")=>"Vector{MovieCredits200ResponseCastInner}", Symbol("crew")=>"Vector{MovieCredits200ResponseCrewInner}", )
OpenAPI.property_type(::Type{ MovieCredits200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_MovieCredits200Response[name]))}

function check_required(o::MovieCredits200Response)
    true
end

function OpenAPI.validate_property(::Type{ MovieCredits200Response }, name::Symbol, val)
end
