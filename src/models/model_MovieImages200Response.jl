# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""movie_images_200_response

    MovieImages200Response(;
        backdrops=nothing,
        id=0,
        logos=nothing,
        posters=nothing,
    )

    - backdrops::Vector{MovieImages200ResponseBackdropsInner}
    - id::Int64
    - logos::Vector{MovieImages200ResponseLogosInner}
    - posters::Vector{MovieImages200ResponsePostersInner}
"""
Base.@kwdef mutable struct MovieImages200Response <: OpenAPI.APIModel
    backdrops::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{MovieImages200ResponseBackdropsInner} }
    id::Union{Nothing, Int64} = 0
    logos::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{MovieImages200ResponseLogosInner} }
    posters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{MovieImages200ResponsePostersInner} }

    function MovieImages200Response(backdrops, id, logos, posters, )
        OpenAPI.validate_property(MovieImages200Response, Symbol("backdrops"), backdrops)
        OpenAPI.validate_property(MovieImages200Response, Symbol("id"), id)
        OpenAPI.validate_property(MovieImages200Response, Symbol("logos"), logos)
        OpenAPI.validate_property(MovieImages200Response, Symbol("posters"), posters)
        return new(backdrops, id, logos, posters, )
    end
end # type MovieImages200Response

const _property_types_MovieImages200Response = Dict{Symbol,String}(Symbol("backdrops")=>"Vector{MovieImages200ResponseBackdropsInner}", Symbol("id")=>"Int64", Symbol("logos")=>"Vector{MovieImages200ResponseLogosInner}", Symbol("posters")=>"Vector{MovieImages200ResponsePostersInner}", )
OpenAPI.property_type(::Type{ MovieImages200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_MovieImages200Response[name]))}

function check_required(o::MovieImages200Response)
    true
end

function OpenAPI.validate_property(::Type{ MovieImages200Response }, name::Symbol, val)
end
