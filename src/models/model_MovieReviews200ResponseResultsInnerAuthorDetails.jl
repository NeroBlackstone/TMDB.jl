# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""movie_reviews_200_response_results_inner_author_details

    MovieReviews200ResponseResultsInnerAuthorDetails(;
        name=nothing,
        username=nothing,
        avatar_path=nothing,
        rating=nothing,
    )

    - name::String
    - username::String
    - avatar_path::String
    - rating::Any
"""
Base.@kwdef mutable struct MovieReviews200ResponseResultsInnerAuthorDetails <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    username::Union{Nothing, String} = nothing
    avatar_path::Union{Nothing, String} = nothing
    rating::Union{Nothing, Any} = nothing

    function MovieReviews200ResponseResultsInnerAuthorDetails(name, username, avatar_path, rating, )
        OpenAPI.validate_property(MovieReviews200ResponseResultsInnerAuthorDetails, Symbol("name"), name)
        OpenAPI.validate_property(MovieReviews200ResponseResultsInnerAuthorDetails, Symbol("username"), username)
        OpenAPI.validate_property(MovieReviews200ResponseResultsInnerAuthorDetails, Symbol("avatar_path"), avatar_path)
        OpenAPI.validate_property(MovieReviews200ResponseResultsInnerAuthorDetails, Symbol("rating"), rating)
        return new(name, username, avatar_path, rating, )
    end
end # type MovieReviews200ResponseResultsInnerAuthorDetails

const _property_types_MovieReviews200ResponseResultsInnerAuthorDetails = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("username")=>"String", Symbol("avatar_path")=>"String", Symbol("rating")=>"Any", )
OpenAPI.property_type(::Type{ MovieReviews200ResponseResultsInnerAuthorDetails }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_MovieReviews200ResponseResultsInnerAuthorDetails[name]))}

function check_required(o::MovieReviews200ResponseResultsInnerAuthorDetails)
    true
end

function OpenAPI.validate_property(::Type{ MovieReviews200ResponseResultsInnerAuthorDetails }, name::Symbol, val)
end
