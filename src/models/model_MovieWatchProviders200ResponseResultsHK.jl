# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""movie_watch_providers_200_response_results_HK

    MovieWatchProviders200ResponseResultsHK(;
        link=nothing,
        flatrate=nothing,
    )

    - link::String
    - flatrate::Vector{MovieWatchProviders200ResponseResultsHKFlatrateInner}
"""
Base.@kwdef mutable struct MovieWatchProviders200ResponseResultsHK <: OpenAPI.APIModel
    link::Union{Nothing, String} = nothing
    flatrate::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{MovieWatchProviders200ResponseResultsHKFlatrateInner} }

    function MovieWatchProviders200ResponseResultsHK(link, flatrate, )
        OpenAPI.validate_property(MovieWatchProviders200ResponseResultsHK, Symbol("link"), link)
        OpenAPI.validate_property(MovieWatchProviders200ResponseResultsHK, Symbol("flatrate"), flatrate)
        return new(link, flatrate, )
    end
end # type MovieWatchProviders200ResponseResultsHK

const _property_types_MovieWatchProviders200ResponseResultsHK = Dict{Symbol,String}(Symbol("link")=>"String", Symbol("flatrate")=>"Vector{MovieWatchProviders200ResponseResultsHKFlatrateInner}", )
OpenAPI.property_type(::Type{ MovieWatchProviders200ResponseResultsHK }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_MovieWatchProviders200ResponseResultsHK[name]))}

function check_required(o::MovieWatchProviders200ResponseResultsHK)
    true
end

function OpenAPI.validate_property(::Type{ MovieWatchProviders200ResponseResultsHK }, name::Symbol, val)
end
