# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""movie_watch_providers_200_response_results_LV

    MovieWatchProviders200ResponseResultsLV(;
        link=nothing,
        flatrate=nothing,
        buy=nothing,
    )

    - link::String
    - flatrate::Vector{MovieWatchProviders200ResponseResultsAUFlatrateInner}
    - buy::Vector{MovieWatchProviders200ResponseResultsCZBuyInner}
"""
Base.@kwdef mutable struct MovieWatchProviders200ResponseResultsLV <: OpenAPI.APIModel
    link::Union{Nothing, String} = nothing
    flatrate::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{MovieWatchProviders200ResponseResultsAUFlatrateInner} }
    buy::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{MovieWatchProviders200ResponseResultsCZBuyInner} }

    function MovieWatchProviders200ResponseResultsLV(link, flatrate, buy, )
        OpenAPI.validate_property(MovieWatchProviders200ResponseResultsLV, Symbol("link"), link)
        OpenAPI.validate_property(MovieWatchProviders200ResponseResultsLV, Symbol("flatrate"), flatrate)
        OpenAPI.validate_property(MovieWatchProviders200ResponseResultsLV, Symbol("buy"), buy)
        return new(link, flatrate, buy, )
    end
end # type MovieWatchProviders200ResponseResultsLV

const _property_types_MovieWatchProviders200ResponseResultsLV = Dict{Symbol,String}(Symbol("link")=>"String", Symbol("flatrate")=>"Vector{MovieWatchProviders200ResponseResultsAUFlatrateInner}", Symbol("buy")=>"Vector{MovieWatchProviders200ResponseResultsCZBuyInner}", )
OpenAPI.property_type(::Type{ MovieWatchProviders200ResponseResultsLV }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_MovieWatchProviders200ResponseResultsLV[name]))}

function check_required(o::MovieWatchProviders200ResponseResultsLV)
    true
end

function OpenAPI.validate_property(::Type{ MovieWatchProviders200ResponseResultsLV }, name::Symbol, val)
end
