# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""person_latest_id_200_response

    PersonLatestId200Response(;
        adult=true,
        also_known_as=nothing,
        biography=nothing,
        birthday=nothing,
        deathday=nothing,
        gender=0,
        homepage=nothing,
        id=0,
        imdb_id=nothing,
        known_for_department=nothing,
        name=nothing,
        place_of_birth=nothing,
        popularity=0,
        profile_path=nothing,
    )

    - adult::Bool
    - also_known_as::Vector{String}
    - biography::String
    - birthday::Any
    - deathday::Any
    - gender::Int64
    - homepage::Any
    - id::Int64
    - imdb_id::Any
    - known_for_department::Any
    - name::String
    - place_of_birth::Any
    - popularity::Int64
    - profile_path::Any
"""
Base.@kwdef mutable struct PersonLatestId200Response <: OpenAPI.APIModel
    adult::Union{Nothing, Bool} = true
    also_known_as::Union{Nothing, Vector{String}} = nothing
    biography::Union{Nothing, String} = nothing
    birthday::Union{Nothing, Any} = nothing
    deathday::Union{Nothing, Any} = nothing
    gender::Union{Nothing, Int64} = 0
    homepage::Union{Nothing, Any} = nothing
    id::Union{Nothing, Int64} = 0
    imdb_id::Union{Nothing, Any} = nothing
    known_for_department::Union{Nothing, Any} = nothing
    name::Union{Nothing, String} = nothing
    place_of_birth::Union{Nothing, Any} = nothing
    popularity::Union{Nothing, Int64} = 0
    profile_path::Union{Nothing, Any} = nothing

    function PersonLatestId200Response(adult, also_known_as, biography, birthday, deathday, gender, homepage, id, imdb_id, known_for_department, name, place_of_birth, popularity, profile_path, )
        OpenAPI.validate_property(PersonLatestId200Response, Symbol("adult"), adult)
        OpenAPI.validate_property(PersonLatestId200Response, Symbol("also_known_as"), also_known_as)
        OpenAPI.validate_property(PersonLatestId200Response, Symbol("biography"), biography)
        OpenAPI.validate_property(PersonLatestId200Response, Symbol("birthday"), birthday)
        OpenAPI.validate_property(PersonLatestId200Response, Symbol("deathday"), deathday)
        OpenAPI.validate_property(PersonLatestId200Response, Symbol("gender"), gender)
        OpenAPI.validate_property(PersonLatestId200Response, Symbol("homepage"), homepage)
        OpenAPI.validate_property(PersonLatestId200Response, Symbol("id"), id)
        OpenAPI.validate_property(PersonLatestId200Response, Symbol("imdb_id"), imdb_id)
        OpenAPI.validate_property(PersonLatestId200Response, Symbol("known_for_department"), known_for_department)
        OpenAPI.validate_property(PersonLatestId200Response, Symbol("name"), name)
        OpenAPI.validate_property(PersonLatestId200Response, Symbol("place_of_birth"), place_of_birth)
        OpenAPI.validate_property(PersonLatestId200Response, Symbol("popularity"), popularity)
        OpenAPI.validate_property(PersonLatestId200Response, Symbol("profile_path"), profile_path)
        return new(adult, also_known_as, biography, birthday, deathday, gender, homepage, id, imdb_id, known_for_department, name, place_of_birth, popularity, profile_path, )
    end
end # type PersonLatestId200Response

const _property_types_PersonLatestId200Response = Dict{Symbol,String}(Symbol("adult")=>"Bool", Symbol("also_known_as")=>"Vector{String}", Symbol("biography")=>"String", Symbol("birthday")=>"Any", Symbol("deathday")=>"Any", Symbol("gender")=>"Int64", Symbol("homepage")=>"Any", Symbol("id")=>"Int64", Symbol("imdb_id")=>"Any", Symbol("known_for_department")=>"Any", Symbol("name")=>"String", Symbol("place_of_birth")=>"Any", Symbol("popularity")=>"Int64", Symbol("profile_path")=>"Any", )
OpenAPI.property_type(::Type{ PersonLatestId200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PersonLatestId200Response[name]))}

function check_required(o::PersonLatestId200Response)
    true
end

function OpenAPI.validate_property(::Type{ PersonLatestId200Response }, name::Symbol, val)
end
