# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""person_tagged_images_200_response_results_inner

    PersonTaggedImages200ResponseResultsInner(;
        aspect_ratio=0,
        file_path=nothing,
        height=0,
        id=nothing,
        iso_639_1=nothing,
        vote_average=0,
        vote_count=0,
        width=0,
        image_type=nothing,
        media=nothing,
        media_type=nothing,
    )

    - aspect_ratio::Float64
    - file_path::String
    - height::Int64
    - id::String
    - iso_639_1::String
    - vote_average::Float64
    - vote_count::Int64
    - width::Int64
    - image_type::String
    - media::PersonTaggedImages200ResponseResultsInnerMedia
    - media_type::String
"""
Base.@kwdef mutable struct PersonTaggedImages200ResponseResultsInner <: OpenAPI.APIModel
    aspect_ratio::Union{Nothing, Float64} = 0
    file_path::Union{Nothing, String} = nothing
    height::Union{Nothing, Int64} = 0
    id::Union{Nothing, String} = nothing
    iso_639_1::Union{Nothing, String} = nothing
    vote_average::Union{Nothing, Float64} = 0
    vote_count::Union{Nothing, Int64} = 0
    width::Union{Nothing, Int64} = 0
    image_type::Union{Nothing, String} = nothing
    media = nothing # spec type: Union{ Nothing, PersonTaggedImages200ResponseResultsInnerMedia }
    media_type::Union{Nothing, String} = nothing

    function PersonTaggedImages200ResponseResultsInner(aspect_ratio, file_path, height, id, iso_639_1, vote_average, vote_count, width, image_type, media, media_type, )
        OpenAPI.validate_property(PersonTaggedImages200ResponseResultsInner, Symbol("aspect_ratio"), aspect_ratio)
        OpenAPI.validate_property(PersonTaggedImages200ResponseResultsInner, Symbol("file_path"), file_path)
        OpenAPI.validate_property(PersonTaggedImages200ResponseResultsInner, Symbol("height"), height)
        OpenAPI.validate_property(PersonTaggedImages200ResponseResultsInner, Symbol("id"), id)
        OpenAPI.validate_property(PersonTaggedImages200ResponseResultsInner, Symbol("iso_639_1"), iso_639_1)
        OpenAPI.validate_property(PersonTaggedImages200ResponseResultsInner, Symbol("vote_average"), vote_average)
        OpenAPI.validate_property(PersonTaggedImages200ResponseResultsInner, Symbol("vote_count"), vote_count)
        OpenAPI.validate_property(PersonTaggedImages200ResponseResultsInner, Symbol("width"), width)
        OpenAPI.validate_property(PersonTaggedImages200ResponseResultsInner, Symbol("image_type"), image_type)
        OpenAPI.validate_property(PersonTaggedImages200ResponseResultsInner, Symbol("media"), media)
        OpenAPI.validate_property(PersonTaggedImages200ResponseResultsInner, Symbol("media_type"), media_type)
        return new(aspect_ratio, file_path, height, id, iso_639_1, vote_average, vote_count, width, image_type, media, media_type, )
    end
end # type PersonTaggedImages200ResponseResultsInner

const _property_types_PersonTaggedImages200ResponseResultsInner = Dict{Symbol,String}(Symbol("aspect_ratio")=>"Float64", Symbol("file_path")=>"String", Symbol("height")=>"Int64", Symbol("id")=>"String", Symbol("iso_639_1")=>"String", Symbol("vote_average")=>"Float64", Symbol("vote_count")=>"Int64", Symbol("width")=>"Int64", Symbol("image_type")=>"String", Symbol("media")=>"PersonTaggedImages200ResponseResultsInnerMedia", Symbol("media_type")=>"String", )
OpenAPI.property_type(::Type{ PersonTaggedImages200ResponseResultsInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PersonTaggedImages200ResponseResultsInner[name]))}

function check_required(o::PersonTaggedImages200ResponseResultsInner)
    true
end

function OpenAPI.validate_property(::Type{ PersonTaggedImages200ResponseResultsInner }, name::Symbol, val)
end
