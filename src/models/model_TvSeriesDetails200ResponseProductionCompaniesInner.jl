# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""tv_series_details_200_response_production_companies_inner

    TvSeriesDetails200ResponseProductionCompaniesInner(;
        id=0,
        logo_path=nothing,
        name=nothing,
        origin_country=nothing,
    )

    - id::Int64
    - logo_path::String
    - name::String
    - origin_country::String
"""
Base.@kwdef mutable struct TvSeriesDetails200ResponseProductionCompaniesInner <: OpenAPI.APIModel
    id::Union{Nothing, Int64} = 0
    logo_path::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    origin_country::Union{Nothing, String} = nothing

    function TvSeriesDetails200ResponseProductionCompaniesInner(id, logo_path, name, origin_country, )
        OpenAPI.validate_property(TvSeriesDetails200ResponseProductionCompaniesInner, Symbol("id"), id)
        OpenAPI.validate_property(TvSeriesDetails200ResponseProductionCompaniesInner, Symbol("logo_path"), logo_path)
        OpenAPI.validate_property(TvSeriesDetails200ResponseProductionCompaniesInner, Symbol("name"), name)
        OpenAPI.validate_property(TvSeriesDetails200ResponseProductionCompaniesInner, Symbol("origin_country"), origin_country)
        return new(id, logo_path, name, origin_country, )
    end
end # type TvSeriesDetails200ResponseProductionCompaniesInner

const _property_types_TvSeriesDetails200ResponseProductionCompaniesInner = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("logo_path")=>"String", Symbol("name")=>"String", Symbol("origin_country")=>"String", )
OpenAPI.property_type(::Type{ TvSeriesDetails200ResponseProductionCompaniesInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TvSeriesDetails200ResponseProductionCompaniesInner[name]))}

function check_required(o::TvSeriesDetails200ResponseProductionCompaniesInner)
    true
end

function OpenAPI.validate_property(::Type{ TvSeriesDetails200ResponseProductionCompaniesInner }, name::Symbol, val)
end
