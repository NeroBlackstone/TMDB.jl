# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""tv_series_watch_providers_200_response_results_PL

    TvSeriesWatchProviders200ResponseResultsPL(;
        link=nothing,
        flatrate=nothing,
        rent=nothing,
    )

    - link::String
    - flatrate::Vector{TvSeriesWatchProviders200ResponseResultsPLFlatrateInner}
    - rent::Vector{TvSeriesWatchProviders200ResponseResultsPLRentInner}
"""
Base.@kwdef mutable struct TvSeriesWatchProviders200ResponseResultsPL <: OpenAPI.APIModel
    link::Union{Nothing, String} = nothing
    flatrate::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TvSeriesWatchProviders200ResponseResultsPLFlatrateInner} }
    rent::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TvSeriesWatchProviders200ResponseResultsPLRentInner} }

    function TvSeriesWatchProviders200ResponseResultsPL(link, flatrate, rent, )
        OpenAPI.validate_property(TvSeriesWatchProviders200ResponseResultsPL, Symbol("link"), link)
        OpenAPI.validate_property(TvSeriesWatchProviders200ResponseResultsPL, Symbol("flatrate"), flatrate)
        OpenAPI.validate_property(TvSeriesWatchProviders200ResponseResultsPL, Symbol("rent"), rent)
        return new(link, flatrate, rent, )
    end
end # type TvSeriesWatchProviders200ResponseResultsPL

const _property_types_TvSeriesWatchProviders200ResponseResultsPL = Dict{Symbol,String}(Symbol("link")=>"String", Symbol("flatrate")=>"Vector{TvSeriesWatchProviders200ResponseResultsPLFlatrateInner}", Symbol("rent")=>"Vector{TvSeriesWatchProviders200ResponseResultsPLRentInner}", )
OpenAPI.property_type(::Type{ TvSeriesWatchProviders200ResponseResultsPL }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TvSeriesWatchProviders200ResponseResultsPL[name]))}

function check_required(o::TvSeriesWatchProviders200ResponseResultsPL)
    true
end

function OpenAPI.validate_property(::Type{ TvSeriesWatchProviders200ResponseResultsPL }, name::Symbol, val)
end
